# --- Build Stage ---
# Use an official Golang image to build the application.
# 'AS builder' names this stage so we can reference it later.
FROM golang:1.22-alpine AS builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go.mod and go.sum to download dependencies first.
# This leverages Docker's layer caching for faster builds.
COPY go.mod ./
RUN go mod download

# Copy the rest of the source code into the container.
COPY . .

# Build the Go application.
# CGO_ENABLED=0 is crucial for creating a static binary that can run in a minimal image.
# -ldflags="-w -s" strips debug symbols, reducing the binary size.
RUN CGO_ENABLED=0 GOOS=linux go build -a -ldflags="-w -s" -o /risk-agent .

# --- Final Stage ---
# Use a minimal 'distroless' image for a small and secure final image.
FROM gcr.io/distroless/static-debian11

# Copy the static binary from the builder stage.
COPY --from=builder /risk-agent /risk-agent

# Expose the port the app runs on. Your deployment expects the container to listen on 8080.
EXPOSE 8080

# Set the entrypoint for the container to run the application.
ENTRYPOINT ["/risk-agent"]
