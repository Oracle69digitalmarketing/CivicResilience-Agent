
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "debug/dwarf"


	_xtest "debug/dwarf_test"

)

var tests = []testing.InternalTest{

	{"TestDwarf5Ranges", _test.TestDwarf5Ranges},

	{"TestSplit", _xtest.TestSplit},

	{"TestReaderSeek", _xtest.TestReaderSeek},

	{"TestRangesSection", _xtest.TestRangesSection},

	{"TestRangesRnglistx", _xtest.TestRangesRnglistx},

	{"TestReaderRanges", _xtest.TestReaderRanges},

	{"Test64Bit", _xtest.Test64Bit},

	{"TestUnitIteration", _xtest.TestUnitIteration},

	{"TestIssue51758", _xtest.TestIssue51758},

	{"TestIssue52045", _xtest.TestIssue52045},

	{"TestIssue57046", _xtest.TestIssue57046},

	{"TestLineELFGCC", _xtest.TestLineELFGCC},

	{"TestLineELFGCCZstd", _xtest.TestLineELFGCCZstd},

	{"TestLineGCCWindows", _xtest.TestLineGCCWindows},

	{"TestLineELFClang", _xtest.TestLineELFClang},

	{"TestLineRnglists", _xtest.TestLineRnglists},

	{"TestLineSeek", _xtest.TestLineSeek},

	{"TestPathJoin", _xtest.TestPathJoin},

	{"TestPathLineReaderMalformed", _xtest.TestPathLineReaderMalformed},

	{"TestTypedefsELF", _xtest.TestTypedefsELF},

	{"TestTypedefsMachO", _xtest.TestTypedefsMachO},

	{"TestTypedefsELFDwarf4", _xtest.TestTypedefsELFDwarf4},

	{"TestTypedefCycle", _xtest.TestTypedefCycle},

	{"TestUnsupportedTypes", _xtest.TestUnsupportedTypes},

	{"TestBitOffsetsELF", _xtest.TestBitOffsetsELF},

	{"TestBitOffsetsMachO", _xtest.TestBitOffsetsMachO},

	{"TestBitOffsetsMachO4", _xtest.TestBitOffsetsMachO4},

	{"TestBitOffsetsELFDwarf4", _xtest.TestBitOffsetsELFDwarf4},

	{"TestBitOffsetsELFDwarf5", _xtest.TestBitOffsetsELFDwarf5},

	{"TestBitFieldZeroArrayIssue50685", _xtest.TestBitFieldZeroArrayIssue50685},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "debug/dwarf"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

