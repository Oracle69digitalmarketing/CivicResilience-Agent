
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "encoding/json"


	_xtest "encoding/json_test"

)

var tests = []testing.InternalTest{

	{"TestMarshal", _test.TestMarshal},

	{"TestMarshalInvalidUTF8", _test.TestMarshalInvalidUTF8},

	{"TestMarshalNumberZeroVal", _test.TestMarshalNumberZeroVal},

	{"TestMarshalEmbeds", _test.TestMarshalEmbeds},

	{"TestUnmarshal", _test.TestUnmarshal},

	{"TestUnmarshalMarshal", _test.TestUnmarshalMarshal},

	{"TestNumberAccessors", _test.TestNumberAccessors},

	{"TestLargeByteSlice", _test.TestLargeByteSlice},

	{"TestUnmarshalInterface", _test.TestUnmarshalInterface},

	{"TestUnmarshalPtrPtr", _test.TestUnmarshalPtrPtr},

	{"TestEscape", _test.TestEscape},

	{"TestErrorMessageFromMisusedString", _test.TestErrorMessageFromMisusedString},

	{"TestRefUnmarshal", _test.TestRefUnmarshal},

	{"TestEmptyString", _test.TestEmptyString},

	{"TestNullString", _test.TestNullString},

	{"TestInterfaceSet", _test.TestInterfaceSet},

	{"TestUnmarshalNulls", _test.TestUnmarshalNulls},

	{"TestStringKind", _test.TestStringKind},

	{"TestByteKind", _test.TestByteKind},

	{"TestSliceOfCustomByte", _test.TestSliceOfCustomByte},

	{"TestUnmarshalTypeError", _test.TestUnmarshalTypeError},

	{"TestUnmarshalSyntax", _test.TestUnmarshalSyntax},

	{"TestUnmarshalUnexported", _test.TestUnmarshalUnexported},

	{"TestUnmarshalJSONLiteralError", _test.TestUnmarshalJSONLiteralError},

	{"TestSkipArrayObjects", _test.TestSkipArrayObjects},

	{"TestPrefilled", _test.TestPrefilled},

	{"TestInvalidUnmarshal", _test.TestInvalidUnmarshal},

	{"TestInvalidStringOption", _test.TestInvalidStringOption},

	{"TestUnmarshalEmbeddedUnexported", _test.TestUnmarshalEmbeddedUnexported},

	{"TestUnmarshalErrorAfterMultipleJSON", _test.TestUnmarshalErrorAfterMultipleJSON},

	{"TestUnmarshalPanic", _test.TestUnmarshalPanic},

	{"TestUnmarshalRecursivePointer", _test.TestUnmarshalRecursivePointer},

	{"TestUnmarshalMapWithTextUnmarshalerStringKey", _test.TestUnmarshalMapWithTextUnmarshalerStringKey},

	{"TestUnmarshalRescanLiteralMangledUnquote", _test.TestUnmarshalRescanLiteralMangledUnquote},

	{"TestUnmarshalMaxDepth", _test.TestUnmarshalMaxDepth},

	{"TestOmitEmpty", _test.TestOmitEmpty},

	{"TestOmitZero", _test.TestOmitZero},

	{"TestOmitZeroMap", _test.TestOmitZeroMap},

	{"TestOmitEmptyZero", _test.TestOmitEmptyZero},

	{"TestRoundtripStringTag", _test.TestRoundtripStringTag},

	{"TestEncodeRenamedByteSlice", _test.TestEncodeRenamedByteSlice},

	{"TestSamePointerNoCycle", _test.TestSamePointerNoCycle},

	{"TestSliceNoCycle", _test.TestSliceNoCycle},

	{"TestUnsupportedValues", _test.TestUnsupportedValues},

	{"TestMarshalTextFloatMap", _test.TestMarshalTextFloatMap},

	{"TestRefValMarshal", _test.TestRefValMarshal},

	{"TestMarshalerEscaping", _test.TestMarshalerEscaping},

	{"TestAnonymousFields", _test.TestAnonymousFields},

	{"TestNilMarshal", _test.TestNilMarshal},

	{"TestEmbeddedBug", _test.TestEmbeddedBug},

	{"TestTaggedFieldDominates", _test.TestTaggedFieldDominates},

	{"TestDuplicatedFieldDisappears", _test.TestDuplicatedFieldDisappears},

	{"TestIssue10281", _test.TestIssue10281},

	{"TestMarshalErrorAndReuseEncodeState", _test.TestMarshalErrorAndReuseEncodeState},

	{"TestHTMLEscape", _test.TestHTMLEscape},

	{"TestEncodePointerString", _test.TestEncodePointerString},

	{"TestEncodeString", _test.TestEncodeString},

	{"TestEncodeBytekind", _test.TestEncodeBytekind},

	{"TestTextMarshalerMapKeysAreSorted", _test.TestTextMarshalerMapKeysAreSorted},

	{"TestNilMarshalerTextMapKey", _test.TestNilMarshalerTextMapKey},

	{"TestMarshalFloat", _test.TestMarshalFloat},

	{"TestMarshalRawMessageValue", _test.TestMarshalRawMessageValue},

	{"TestMarshalPanic", _test.TestMarshalPanic},

	{"TestMarshalUncommonFieldNames", _test.TestMarshalUncommonFieldNames},

	{"TestMarshalerError", _test.TestMarshalerError},

	{"TestIssue63379", _test.TestIssue63379},

	{"TestSynctestMarshal", _test.TestSynctestMarshal},

	{"TestNumberIsValid", _test.TestNumberIsValid},

	{"TestValid", _test.TestValid},

	{"TestCompactAndIndent", _test.TestCompactAndIndent},

	{"TestCompactSeparators", _test.TestCompactSeparators},

	{"TestCompactBig", _test.TestCompactBig},

	{"TestIndentBig", _test.TestIndentBig},

	{"TestIndentErrors", _test.TestIndentErrors},

	{"TestEncoder", _test.TestEncoder},

	{"TestEncoderErrorAndReuseEncodeState", _test.TestEncoderErrorAndReuseEncodeState},

	{"TestEncoderIndent", _test.TestEncoderIndent},

	{"TestEncoderSetEscapeHTML", _test.TestEncoderSetEscapeHTML},

	{"TestDecoder", _test.TestDecoder},

	{"TestDecoderBuffered", _test.TestDecoderBuffered},

	{"TestRawMessage", _test.TestRawMessage},

	{"TestNullRawMessage", _test.TestNullRawMessage},

	{"TestBlocking", _test.TestBlocking},

	{"TestDecodeInStream", _test.TestDecodeInStream},

	{"TestHTTPDecoding", _test.TestHTTPDecoding},

	{"TestStructTagObjectKey", _test.TestStructTagObjectKey},

	{"TestTagParsing", _test.TestTagParsing},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkCodeEncoder", _test.BenchmarkCodeEncoder},

	{"BenchmarkCodeEncoderError", _test.BenchmarkCodeEncoderError},

	{"BenchmarkCodeMarshal", _test.BenchmarkCodeMarshal},

	{"BenchmarkCodeMarshalError", _test.BenchmarkCodeMarshalError},

	{"BenchmarkMarshalBytes", _test.BenchmarkMarshalBytes},

	{"BenchmarkMarshalBytesError", _test.BenchmarkMarshalBytesError},

	{"BenchmarkMarshalMap", _test.BenchmarkMarshalMap},

	{"BenchmarkCodeDecoder", _test.BenchmarkCodeDecoder},

	{"BenchmarkUnicodeDecoder", _test.BenchmarkUnicodeDecoder},

	{"BenchmarkDecoderStream", _test.BenchmarkDecoderStream},

	{"BenchmarkCodeUnmarshal", _test.BenchmarkCodeUnmarshal},

	{"BenchmarkCodeUnmarshalReuse", _test.BenchmarkCodeUnmarshalReuse},

	{"BenchmarkUnmarshalString", _test.BenchmarkUnmarshalString},

	{"BenchmarkUnmarshalFloat64", _test.BenchmarkUnmarshalFloat64},

	{"BenchmarkUnmarshalInt64", _test.BenchmarkUnmarshalInt64},

	{"BenchmarkUnmarshalMap", _test.BenchmarkUnmarshalMap},

	{"BenchmarkIssue10335", _test.BenchmarkIssue10335},

	{"BenchmarkIssue34127", _test.BenchmarkIssue34127},

	{"BenchmarkUnmapped", _test.BenchmarkUnmapped},

	{"BenchmarkTypeFieldsCache", _test.BenchmarkTypeFieldsCache},

	{"BenchmarkEncodeMarshaler", _test.BenchmarkEncodeMarshaler},

	{"BenchmarkEncoderEncode", _test.BenchmarkEncoderEncode},

	{"BenchmarkNumberIsValid", _test.BenchmarkNumberIsValid},

	{"BenchmarkNumberIsValidRegexp", _test.BenchmarkNumberIsValidRegexp},

	{"BenchmarkUnmarshalNumber", _test.BenchmarkUnmarshalNumber},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzEqualFold", _test.FuzzEqualFold},

	{"FuzzUnmarshalJSON", _test.FuzzUnmarshalJSON},

	{"FuzzDecoderToken", _test.FuzzDecoderToken},

}

var examples = []testing.InternalExample{

	{"Example_customMarshalJSON", _xtest.Example_customMarshalJSON, "Zoo Census:\n* Gophers: 3\n* Zebras:  2\n* Unknown: 3\n", false},

	{"ExampleMarshal", _xtest.ExampleMarshal, "{\"ID\":1,\"Name\":\"Reds\",\"Colors\":[\"Crimson\",\"Red\",\"Ruby\",\"Maroon\"]}\n", false},

	{"ExampleUnmarshal", _xtest.ExampleUnmarshal, "[{Name:Platypus Order:Monotremata} {Name:Quoll Order:Dasyuromorphia}]\n", false},

	{"ExampleDecoder", _xtest.ExampleDecoder, "Ed: Knock knock.\nSam: Who's there?\nEd: Go fmt.\nSam: Go fmt who?\nEd: Go fmt yourself!\n", false},

	{"ExampleDecoder_Token", _xtest.ExampleDecoder_Token, "json.Delim: { (more)\nstring: Message (more)\nstring: Hello (more)\nstring: Array (more)\njson.Delim: [ (more)\nfloat64: 1 (more)\nfloat64: 2 (more)\nfloat64: 3\njson.Delim: ] (more)\nstring: Null (more)\n<nil>: <nil> (more)\nstring: Number (more)\nfloat64: 1.234\njson.Delim: }\n", false},

	{"ExampleDecoder_Decode_stream", _xtest.ExampleDecoder_Decode_stream, "json.Delim: [\nEd: Knock knock.\nSam: Who's there?\nEd: Go fmt.\nSam: Go fmt who?\nEd: Go fmt yourself!\njson.Delim: ]\n", false},

	{"ExampleRawMessage_unmarshal", _xtest.ExampleRawMessage_unmarshal, "YCbCr &{255 0 -10}\nRGB &{98 218 255}\n", false},

	{"ExampleRawMessage_marshal", _xtest.ExampleRawMessage_marshal, "{\n\t\"header\": {\n\t\t\"precomputed\": true\n\t},\n\t\"body\": \"Hello Gophers!\"\n}\n", false},

	{"ExampleIndent", _xtest.ExampleIndent, "[\n=\t{\n=\t\t\"Name\": \"Diamond Fork\",\n=\t\t\"Number\": 29\n=\t},\n=\t{\n=\t\t\"Name\": \"Sheep Creek\",\n=\t\t\"Number\": 51\n=\t}\n=]\n", false},

	{"ExampleMarshalIndent", _xtest.ExampleMarshalIndent, "{\n<prefix><indent>\"a\": 1,\n<prefix><indent>\"b\": 2\n<prefix>}\n", false},

	{"ExampleValid", _xtest.ExampleValid, "true false\n", false},

	{"ExampleHTMLEscape", _xtest.ExampleHTMLEscape, "{\"Name\":\"\\u003cb\\u003eHTML content\\u003c/b\\u003e\"}\n", false},

	{"Example_textMarshalJSON", _xtest.Example_textMarshalJSON, "Inventory Counts:\n* Small:        3\n* Large:        2\n* Unrecognized: 3\n", false},

}

func init() {

	testdeps.ImportPath = "encoding/json"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

