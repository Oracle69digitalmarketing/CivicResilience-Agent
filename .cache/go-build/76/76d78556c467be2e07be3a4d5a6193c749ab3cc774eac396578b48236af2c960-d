
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"reflect"

	"testing"
	"testing/internal/testdeps"



	_test "os/exec"


	_xtest "os/exec_test"

)

var tests = []testing.InternalTest{

	{"TestDedupEnv", _test.TestDedupEnv},

	{"TestPrefixSuffixSaver", _test.TestPrefixSuffixSaver},

	{"TestLookPathNotFound", _test.TestLookPathNotFound},

	{"TestLookPath", _xtest.TestLookPath},

	{"TestCredentialNoSetGroups", _xtest.TestCredentialNoSetGroups},

	{"TestWaitid", _xtest.TestWaitid},

	{"TestImplicitPWD", _xtest.TestImplicitPWD},

	{"TestExplicitPWD", _xtest.TestExplicitPWD},

	{"TestSIGCHLD", _xtest.TestSIGCHLD},

	{"TestEcho", _xtest.TestEcho},

	{"TestCommandRelativeName", _xtest.TestCommandRelativeName},

	{"TestCatStdin", _xtest.TestCatStdin},

	{"TestEchoFileRace", _xtest.TestEchoFileRace},

	{"TestCatGoodAndBadFile", _xtest.TestCatGoodAndBadFile},

	{"TestNoExistExecutable", _xtest.TestNoExistExecutable},

	{"TestExitStatus", _xtest.TestExitStatus},

	{"TestExitCode", _xtest.TestExitCode},

	{"TestPipes", _xtest.TestPipes},

	{"TestStdinClose", _xtest.TestStdinClose},

	{"TestStdinCloseRace", _xtest.TestStdinCloseRace},

	{"TestPipeLookPathLeak", _xtest.TestPipeLookPathLeak},

	{"TestExtraFiles", _xtest.TestExtraFiles},

	{"TestExtraFilesRace", _xtest.TestExtraFilesRace},

	{"TestIgnorePipeErrorOnSuccess", _xtest.TestIgnorePipeErrorOnSuccess},

	{"TestClosePipeOnCopyError", _xtest.TestClosePipeOnCopyError},

	{"TestOutputStderrCapture", _xtest.TestOutputStderrCapture},

	{"TestContext", _xtest.TestContext},

	{"TestContextCancel", _xtest.TestContextCancel},

	{"TestDedupEnvEcho", _xtest.TestDedupEnvEcho},

	{"TestEnvNULCharacter", _xtest.TestEnvNULCharacter},

	{"TestString", _xtest.TestString},

	{"TestStringPathNotResolved", _xtest.TestStringPathNotResolved},

	{"TestNoPath", _xtest.TestNoPath},

	{"TestDoubleStartLeavesPipesOpen", _xtest.TestDoubleStartLeavesPipesOpen},

	{"TestWaitInterrupt", _xtest.TestWaitInterrupt},

	{"TestCancelErrors", _xtest.TestCancelErrors},

	{"TestConcurrentExec", _xtest.TestConcurrentExec},

	{"TestPathRace", _xtest.TestPathRace},

	{"TestAbsPathExec", _xtest.TestAbsPathExec},

	{"TestFindExecutableVsNoexec", _xtest.TestFindExecutableVsNoexec},

	{"TestLookPathUnixEmptyPath", _xtest.TestLookPathUnixEmptyPath},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkExecHostname", _test.BenchmarkExecHostname},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "os/exec"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	_xtest.TestMain(m)
	os.Exit(int(reflect.ValueOf(m).Elem().FieldByName("exitCode").Int()))

}

