
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "crypto/cipher"


	_xtest "crypto/cipher_test"

)

var tests = []testing.InternalTest{

	{"TestCBCEncrypterAES", _xtest.TestCBCEncrypterAES},

	{"TestCBCDecrypterAES", _xtest.TestCBCDecrypterAES},

	{"TestCBCBlockMode", _xtest.TestCBCBlockMode},

	{"TestCBCExtraMethods", _xtest.TestCBCExtraMethods},

	{"TestCFBVectors", _xtest.TestCFBVectors},

	{"TestCFBInverse", _xtest.TestCFBInverse},

	{"TestCFBStream", _xtest.TestCFBStream},

	{"TestCTR_AES", _xtest.TestCTR_AES},

	{"TestCTR_AES_multiblock_random_IV", _xtest.TestCTR_AES_multiblock_random_IV},

	{"TestCTR_AES_multiblock_overflow_IV", _xtest.TestCTR_AES_multiblock_overflow_IV},

	{"TestCTR_AES_multiblock_XORKeyStreamAt", _xtest.TestCTR_AES_multiblock_XORKeyStreamAt},

	{"TestCTR", _xtest.TestCTR},

	{"TestCTRStream", _xtest.TestCTRStream},

	{"TestCTRExtraMethods", _xtest.TestCTRExtraMethods},

	{"TestAESGCM", _xtest.TestAESGCM},

	{"TestGCMInvalidTagSize", _xtest.TestGCMInvalidTagSize},

	{"TestTagFailureOverwrite", _xtest.TestTagFailureOverwrite},

	{"TestGCMCounterWrap", _xtest.TestGCMCounterWrap},

	{"TestGCMAsm", _xtest.TestGCMAsm},

	{"TestGCMAEAD", _xtest.TestGCMAEAD},

	{"TestGCMExtraMethods", _xtest.TestGCMExtraMethods},

	{"TestFIPSServiceIndicator", _xtest.TestFIPSServiceIndicator},

	{"TestGCMForSSH", _xtest.TestGCMForSSH},

	{"TestCTRAble", _xtest.TestCTRAble},

	{"TestCBCAble", _xtest.TestCBCAble},

	{"TestGCM", _xtest.TestGCM},

	{"TestNoExtraMethods", _xtest.TestNoExtraMethods},

	{"TestOFB", _xtest.TestOFB},

	{"TestOFBStream", _xtest.TestOFBStream},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkAESGCM", _xtest.BenchmarkAESGCM},

	{"BenchmarkAESCTR", _xtest.BenchmarkAESCTR},

	{"BenchmarkAESCBCEncrypt1K", _xtest.BenchmarkAESCBCEncrypt1K},

	{"BenchmarkAESCBCDecrypt1K", _xtest.BenchmarkAESCBCDecrypt1K},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleNewGCM_decrypt", _xtest.ExampleNewGCM_decrypt, "exampleplaintext\n", false},

	{"ExampleNewCBCDecrypter", _xtest.ExampleNewCBCDecrypter, "exampleplaintext\n", false},

	{"ExampleNewCFBDecrypter", _xtest.ExampleNewCFBDecrypter, "some plaintext\n", false},

	{"ExampleNewCTR", _xtest.ExampleNewCTR, "some plaintext\n", false},

	{"ExampleNewOFB", _xtest.ExampleNewOFB, "some plaintext\n", false},

	{"ExampleStreamReader", _xtest.ExampleStreamReader, "some secret text\n", false},

	{"ExampleStreamWriter", _xtest.ExampleStreamWriter, "cf0495cc6f75dafc23948538e79904a9\n", false},

}

func init() {

	testdeps.ImportPath = "crypto/cipher"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

