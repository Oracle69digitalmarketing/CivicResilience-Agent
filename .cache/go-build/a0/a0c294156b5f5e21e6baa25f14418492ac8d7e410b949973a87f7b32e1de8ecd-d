
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"reflect"

	"testing"
	"testing/internal/testdeps"



	_test "testing"


	_xtest "testing_test"

)

var tests = []testing.InternalTest{

	{"TestBenchmarkBLoop", _test.TestBenchmarkBLoop},

	{"TestBenchmarkBLoopBreak", _test.TestBenchmarkBLoopBreak},

	{"TestBenchmarkBLoopError", _test.TestBenchmarkBLoopError},

	{"TestBenchmarkBLoopStop", _test.TestBenchmarkBLoopStop},

	{"TestIsSpace", _test.TestIsSpace},

	{"TestSplitRegexp", _test.TestSplitRegexp},

	{"TestMatcher", _test.TestMatcher},

	{"TestNaming", _test.TestNaming},

	{"TestTestState", _test.TestTestState},

	{"TestTRun", _test.TestTRun},

	{"TestBRun", _test.TestBRun},

	{"TestBenchmarkOutput", _test.TestBenchmarkOutput},

	{"TestBenchmarkStartsFrom1", _test.TestBenchmarkStartsFrom1},

	{"TestBenchmarkReadMemStatsBeforeFirstRun", _test.TestBenchmarkReadMemStatsBeforeFirstRun},

	{"TestRacyOutput", _test.TestRacyOutput},

	{"TestLogAfterComplete", _test.TestLogAfterComplete},

	{"TestBenchmark", _test.TestBenchmark},

	{"TestCleanup", _test.TestCleanup},

	{"TestConcurrentCleanup", _test.TestConcurrentCleanup},

	{"TestCleanupCalledEvenAfterGoexit", _test.TestCleanupCalledEvenAfterGoexit},

	{"TestRunCleanup", _test.TestRunCleanup},

	{"TestCleanupParallelSubtests", _test.TestCleanupParallelSubtests},

	{"TestNestedCleanup", _test.TestNestedCleanup},

	{"TestOutput", _test.TestOutput},

	{"TestOutputAfterComplete", _test.TestOutputAfterComplete},

	{"TestOutputWriteAfterComplete", _test.TestOutputWriteAfterComplete},

	{"TestOutputEscape1", _test.TestOutputEscape1},

	{"TestOutputEscape2", _test.TestOutputEscape2},

	{"TestAllocsPerRun", _xtest.TestAllocsPerRun},

	{"TestPrettyPrint", _xtest.TestPrettyPrint},

	{"TestResultString", _xtest.TestResultString},

	{"TestRunParallel", _xtest.TestRunParallel},

	{"TestRunParallelFail", _xtest.TestRunParallelFail},

	{"TestRunParallelFatal", _xtest.TestRunParallelFatal},

	{"TestRunParallelSkipNow", _xtest.TestRunParallelSkipNow},

	{"TestBenchmarkContext", _xtest.TestBenchmarkContext},

	{"TestReportMetric", _xtest.TestReportMetric},

	{"TestFlag", _xtest.TestFlag},

	{"TestTBHelper", _xtest.TestTBHelper},

	{"TestTBHelperParallel", _xtest.TestTBHelperParallel},

	{"TestPanic", _xtest.TestPanic},

	{"TestPanicHelper", _xtest.TestPanicHelper},

	{"TestMorePanic", _xtest.TestMorePanic},

	{"TestCallRunInCleanupHelper", _xtest.TestCallRunInCleanupHelper},

	{"TestGoexitInCleanupAfterPanicHelper", _xtest.TestGoexitInCleanupAfterPanicHelper},

	{"TestTempDirInCleanup", _xtest.TestTempDirInCleanup},

	{"TestTempDirInBenchmark", _xtest.TestTempDirInBenchmark},

	{"TestTempDir", _xtest.TestTempDir},

	{"TestSetenv", _xtest.TestSetenv},

	{"TestSetenvWithParallelAfter", _xtest.TestSetenvWithParallelAfter},

	{"TestSetenvWithParallelBefore", _xtest.TestSetenvWithParallelBefore},

	{"TestSetenvWithParallelParentBefore", _xtest.TestSetenvWithParallelParentBefore},

	{"TestSetenvWithParallelGrandParentBefore", _xtest.TestSetenvWithParallelGrandParentBefore},

	{"TestChdirWithParallelAfter", _xtest.TestChdirWithParallelAfter},

	{"TestChdirWithParallelBefore", _xtest.TestChdirWithParallelBefore},

	{"TestChdirWithParallelParentBefore", _xtest.TestChdirWithParallelParentBefore},

	{"TestChdirWithParallelGrandParentBefore", _xtest.TestChdirWithParallelGrandParentBefore},

	{"TestChdir", _xtest.TestChdir},

	{"TestTesting", _xtest.TestTesting},

	{"TestRaceReports", _xtest.TestRaceReports},

	{"TestRaceName", _xtest.TestRaceName},

	{"TestRaceSubReports", _xtest.TestRaceSubReports},

	{"TestRaceInCleanup", _xtest.TestRaceInCleanup},

	{"TestDeepSubtestRace", _xtest.TestDeepSubtestRace},

	{"TestRaceDuringParallelFailsAllSubtests", _xtest.TestRaceDuringParallelFailsAllSubtests},

	{"TestRaceBeforeParallel", _xtest.TestRaceBeforeParallel},

	{"TestRaceBeforeTests", _xtest.TestRaceBeforeTests},

	{"TestBenchmarkRace", _xtest.TestBenchmarkRace},

	{"TestBenchmarkRaceBLoop", _xtest.TestBenchmarkRaceBLoop},

	{"TestBenchmarkSubRace", _xtest.TestBenchmarkSubRace},

	{"TestRunningTests", _xtest.TestRunningTests},

	{"TestRunningTestsInCleanup", _xtest.TestRunningTestsInCleanup},

	{"TestConcurrentRun", _xtest.TestConcurrentRun},

	{"TestParentRun", _xtest.TestParentRun},

	{"TestContext", _xtest.TestContext},

	{"TestAttrExample", _xtest.TestAttrExample},

	{"TestAttrSet", _xtest.TestAttrSet},

	{"TestAttrInvalid", _xtest.TestAttrInvalid},

	{"TestBenchmarkBLoopIterationCorrect", _xtest.TestBenchmarkBLoopIterationCorrect},

	{"TestBenchmarkBNIterationCorrect", _xtest.TestBenchmarkBNIterationCorrect},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkTBHelper", _xtest.BenchmarkTBHelper},

	{"BenchmarkRacy", _xtest.BenchmarkRacy},

	{"BenchmarkBLoopRacy", _xtest.BenchmarkBLoopRacy},

	{"BenchmarkSubRacy", _xtest.BenchmarkSubRacy},

	{"BenchmarkBLoopPrint", _xtest.BenchmarkBLoopPrint},

	{"BenchmarkBNPrint", _xtest.BenchmarkBNPrint},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzNaming", _test.FuzzNaming},

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "testing"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	_xtest.TestMain(m)
	os.Exit(int(reflect.ValueOf(m).Elem().FieldByName("exitCode").Int()))

}

