
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "math/rand/v2"


	_xtest "math/rand/v2_test"

)

var tests = []testing.InternalTest{

	{"TestAuto", _xtest.TestAuto},

	{"TestChaCha8", _xtest.TestChaCha8},

	{"TestChaCha8Read", _xtest.TestChaCha8Read},

	{"TestChaCha8Marshal", _xtest.TestChaCha8Marshal},

	{"TestChaCha8MarshalRead", _xtest.TestChaCha8MarshalRead},

	{"TestPCGMarshal", _xtest.TestPCGMarshal},

	{"TestPCG", _xtest.TestPCG},

	{"TestConcurrent", _xtest.TestConcurrent},

	{"TestStandardNormalValues", _xtest.TestStandardNormalValues},

	{"TestNonStandardNormalValues", _xtest.TestNonStandardNormalValues},

	{"TestStandardExponentialValues", _xtest.TestStandardExponentialValues},

	{"TestNonStandardExponentialValues", _xtest.TestNonStandardExponentialValues},

	{"TestNormTables", _xtest.TestNormTables},

	{"TestExpTables", _xtest.TestExpTables},

	{"TestFloat32", _xtest.TestFloat32},

	{"TestShuffleSmall", _xtest.TestShuffleSmall},

	{"TestUniformFactorial", _xtest.TestUniformFactorial},

	{"TestN", _xtest.TestN},

	{"TestRegress", _xtest.TestRegress},

	{"TestUpdateExample", _xtest.TestUpdateExample},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkChaCha8MarshalBinary", _xtest.BenchmarkChaCha8MarshalBinary},

	{"BenchmarkChaCha8MarshalBinaryRead", _xtest.BenchmarkChaCha8MarshalBinaryRead},

	{"BenchmarkChaCha8", _xtest.BenchmarkChaCha8},

	{"BenchmarkChaCha8Read", _xtest.BenchmarkChaCha8Read},

	{"BenchmarkPCG_DXSM", _xtest.BenchmarkPCG_DXSM},

	{"BenchmarkSourceUint64", _xtest.BenchmarkSourceUint64},

	{"BenchmarkGlobalInt64", _xtest.BenchmarkGlobalInt64},

	{"BenchmarkGlobalInt64Parallel", _xtest.BenchmarkGlobalInt64Parallel},

	{"BenchmarkGlobalUint64", _xtest.BenchmarkGlobalUint64},

	{"BenchmarkGlobalUint64Parallel", _xtest.BenchmarkGlobalUint64Parallel},

	{"BenchmarkInt64", _xtest.BenchmarkInt64},

	{"BenchmarkUint64", _xtest.BenchmarkUint64},

	{"BenchmarkGlobalIntN1000", _xtest.BenchmarkGlobalIntN1000},

	{"BenchmarkIntN1000", _xtest.BenchmarkIntN1000},

	{"BenchmarkInt64N1000", _xtest.BenchmarkInt64N1000},

	{"BenchmarkInt64N1e8", _xtest.BenchmarkInt64N1e8},

	{"BenchmarkInt64N1e9", _xtest.BenchmarkInt64N1e9},

	{"BenchmarkInt64N2e9", _xtest.BenchmarkInt64N2e9},

	{"BenchmarkInt64N1e18", _xtest.BenchmarkInt64N1e18},

	{"BenchmarkInt64N2e18", _xtest.BenchmarkInt64N2e18},

	{"BenchmarkInt64N4e18", _xtest.BenchmarkInt64N4e18},

	{"BenchmarkInt32N1000", _xtest.BenchmarkInt32N1000},

	{"BenchmarkInt32N1e8", _xtest.BenchmarkInt32N1e8},

	{"BenchmarkInt32N1e9", _xtest.BenchmarkInt32N1e9},

	{"BenchmarkInt32N2e9", _xtest.BenchmarkInt32N2e9},

	{"BenchmarkFloat32", _xtest.BenchmarkFloat32},

	{"BenchmarkFloat64", _xtest.BenchmarkFloat64},

	{"BenchmarkExpFloat64", _xtest.BenchmarkExpFloat64},

	{"BenchmarkNormFloat64", _xtest.BenchmarkNormFloat64},

	{"BenchmarkPerm3", _xtest.BenchmarkPerm3},

	{"BenchmarkPerm30", _xtest.BenchmarkPerm30},

	{"BenchmarkPerm30ViaShuffle", _xtest.BenchmarkPerm30ViaShuffle},

	{"BenchmarkShuffleOverhead", _xtest.BenchmarkShuffleOverhead},

	{"BenchmarkConcurrent", _xtest.BenchmarkConcurrent},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"Example_rand", _xtest.Example_rand, "Float32     0.95955694          0.8076733            0.8135684\nFloat64     0.4297927436037299  0.797802349388613    0.3883664855410056\nExpFloat64  0.43463410545541104 0.5513632046504593   0.7426404617374481\nNormFloat64 -0.9303318111676635 -0.04750789419852852 0.22248301107582735\nInt32       2020777787          260808523            851126509\nInt64       5231057920893523323 4257872588489500903  158397175702351138\nUint32      314478343           1418758728           208955345\nIntN(10)    6                   2                    0\nInt32N(10)  3                   7                    7\nInt64N(10)  8                   9                    4\nPerm        [0 3 1 4 2]         [4 1 2 0 3]          [4 3 2 0 1]\n", false},

	{"ExamplePerm", _xtest.ExamplePerm, "1\n2\n0\n", true},

}

func init() {

	testdeps.ImportPath = "math/rand/v2"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

