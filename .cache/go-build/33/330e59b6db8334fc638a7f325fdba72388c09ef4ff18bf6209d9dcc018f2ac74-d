
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "internal/runtime/atomic"


	_xtest "internal/runtime/atomic_test"

)

var tests = []testing.InternalTest{

	{"TestAnd32", _xtest.TestAnd32},

	{"TestAnd64", _xtest.TestAnd64},

	{"TestOr32", _xtest.TestOr32},

	{"TestOr64", _xtest.TestOr64},

	{"TestXadduintptr", _xtest.TestXadduintptr},

	{"TestXadduintptrOnUint64", _xtest.TestXadduintptrOnUint64},

	{"TestUnaligned64", _xtest.TestUnaligned64},

	{"TestAnd8", _xtest.TestAnd8},

	{"TestAnd", _xtest.TestAnd},

	{"TestOr8", _xtest.TestOr8},

	{"TestOr", _xtest.TestOr},

	{"TestBitwiseContended8", _xtest.TestBitwiseContended8},

	{"TestBitwiseContended", _xtest.TestBitwiseContended},

	{"TestCasRel", _xtest.TestCasRel},

	{"TestStorepNoWB", _xtest.TestStorepNoWB},

	{"TestXchg8", _xtest.TestXchg8},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkAnd32", _xtest.BenchmarkAnd32},

	{"BenchmarkAnd32Parallel", _xtest.BenchmarkAnd32Parallel},

	{"BenchmarkAnd64", _xtest.BenchmarkAnd64},

	{"BenchmarkAnd64Parallel", _xtest.BenchmarkAnd64Parallel},

	{"BenchmarkOr32", _xtest.BenchmarkOr32},

	{"BenchmarkOr32Parallel", _xtest.BenchmarkOr32Parallel},

	{"BenchmarkOr64", _xtest.BenchmarkOr64},

	{"BenchmarkOr64Parallel", _xtest.BenchmarkOr64Parallel},

	{"BenchmarkAtomicLoad64", _xtest.BenchmarkAtomicLoad64},

	{"BenchmarkAtomicStore64", _xtest.BenchmarkAtomicStore64},

	{"BenchmarkAtomicLoad", _xtest.BenchmarkAtomicLoad},

	{"BenchmarkAtomicStore", _xtest.BenchmarkAtomicStore},

	{"BenchmarkAtomicLoad8", _xtest.BenchmarkAtomicLoad8},

	{"BenchmarkAtomicStore8", _xtest.BenchmarkAtomicStore8},

	{"BenchmarkAnd8", _xtest.BenchmarkAnd8},

	{"BenchmarkAnd", _xtest.BenchmarkAnd},

	{"BenchmarkAnd8Parallel", _xtest.BenchmarkAnd8Parallel},

	{"BenchmarkAndParallel", _xtest.BenchmarkAndParallel},

	{"BenchmarkOr8", _xtest.BenchmarkOr8},

	{"BenchmarkOr", _xtest.BenchmarkOr},

	{"BenchmarkOr8Parallel", _xtest.BenchmarkOr8Parallel},

	{"BenchmarkOrParallel", _xtest.BenchmarkOrParallel},

	{"BenchmarkXadd", _xtest.BenchmarkXadd},

	{"BenchmarkXadd64", _xtest.BenchmarkXadd64},

	{"BenchmarkCas", _xtest.BenchmarkCas},

	{"BenchmarkCas64", _xtest.BenchmarkCas64},

	{"BenchmarkXchg", _xtest.BenchmarkXchg},

	{"BenchmarkXchg64", _xtest.BenchmarkXchg64},

	{"BenchmarkXchg8", _xtest.BenchmarkXchg8},

	{"BenchmarkXchg8Parallel", _xtest.BenchmarkXchg8Parallel},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "internal/runtime/atomic"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

