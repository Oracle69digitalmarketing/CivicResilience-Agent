
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "time"


	_xtest "time_test"

)

var tests = []testing.InternalTest{

	{"TestNextStdChunk", _xtest.TestNextStdChunk},

	{"TestRFC3339Conversion", _xtest.TestRFC3339Conversion},

	{"TestAppendInt", _xtest.TestAppendInt},

	{"TestFormat", _xtest.TestFormat},

	{"TestGoString", _xtest.TestGoString},

	{"TestFormatSingleDigits", _xtest.TestFormatSingleDigits},

	{"TestFormatShortYear", _xtest.TestFormatShortYear},

	{"TestParse", _xtest.TestParse},

	{"TestParseDayOutOfRange", _xtest.TestParseDayOutOfRange},

	{"TestParseInLocation", _xtest.TestParseInLocation},

	{"TestLoadLocationZipFile", _xtest.TestLoadLocationZipFile},

	{"TestRubyParse", _xtest.TestRubyParse},

	{"TestFormatAndParse", _xtest.TestFormatAndParse},

	{"TestParseTimeZone", _xtest.TestParseTimeZone},

	{"TestParseErrors", _xtest.TestParseErrors},

	{"TestNoonIs12PM", _xtest.TestNoonIs12PM},

	{"TestMidnightIs12AM", _xtest.TestMidnightIs12AM},

	{"Test12PMIsNoon", _xtest.Test12PMIsNoon},

	{"Test12AMIsMidnight", _xtest.Test12AMIsMidnight},

	{"TestMissingZone", _xtest.TestMissingZone},

	{"TestMinutesInTimeZone", _xtest.TestMinutesInTimeZone},

	{"TestParseSecondsInTimeZone", _xtest.TestParseSecondsInTimeZone},

	{"TestFormatSecondsInTimeZone", _xtest.TestFormatSecondsInTimeZone},

	{"TestUnderscoreTwoThousand", _xtest.TestUnderscoreTwoThousand},

	{"TestStd0xParseError", _xtest.TestStd0xParseError},

	{"TestParseMonthOutOfRange", _xtest.TestParseMonthOutOfRange},

	{"TestParseYday", _xtest.TestParseYday},

	{"TestQuote", _xtest.TestQuote},

	{"TestFormatFractionalSecondSeparators", _xtest.TestFormatFractionalSecondSeparators},

	{"TestParseFractionalSecondsLongerThanNineDigits", _xtest.TestParseFractionalSecondsLongerThanNineDigits},

	{"TestLinkname", _xtest.TestLinkname},

	{"TestHasMonotonicClock", _xtest.TestHasMonotonicClock},

	{"TestMonotonicAdd", _xtest.TestMonotonicAdd},

	{"TestMonotonicSub", _xtest.TestMonotonicSub},

	{"TestMonotonicOverflow", _xtest.TestMonotonicOverflow},

	{"TestMonotonicString", _xtest.TestMonotonicString},

	{"TestSleep", _xtest.TestSleep},

	{"TestAfterFunc", _xtest.TestAfterFunc},

	{"TestTickerStress", _xtest.TestTickerStress},

	{"TestTickerConcurrentStress", _xtest.TestTickerConcurrentStress},

	{"TestAfterFuncStarvation", _xtest.TestAfterFuncStarvation},

	{"TestAfter", _xtest.TestAfter},

	{"TestAfterTick", _xtest.TestAfterTick},

	{"TestAfterStop", _xtest.TestAfterStop},

	{"TestAfterQueuing", _xtest.TestAfterQueuing},

	{"TestTimerStopStress", _xtest.TestTimerStopStress},

	{"TestSleepZeroDeadlock", _xtest.TestSleepZeroDeadlock},

	{"TestReset", _xtest.TestReset},

	{"TestOverflowSleep", _xtest.TestOverflowSleep},

	{"TestIssue5745", _xtest.TestIssue5745},

	{"TestOverflowPeriodRuntimeTimer", _xtest.TestOverflowPeriodRuntimeTimer},

	{"TestZeroTimerResetPanics", _xtest.TestZeroTimerResetPanics},

	{"TestZeroTimerStopPanics", _xtest.TestZeroTimerStopPanics},

	{"TestZeroTimer", _xtest.TestZeroTimer},

	{"TestTimerModifiedEarlier", _xtest.TestTimerModifiedEarlier},

	{"TestAdjustTimers", _xtest.TestAdjustTimers},

	{"TestStopResult", _xtest.TestStopResult},

	{"TestResetResult", _xtest.TestResetResult},

	{"TestMultiWakeupTicker", _xtest.TestMultiWakeupTicker},

	{"TestMultiWakeupTimer", _xtest.TestMultiWakeupTimer},

	{"TestTicker", _xtest.TestTicker},

	{"TestTickerStopWithDirectInitialization", _xtest.TestTickerStopWithDirectInitialization},

	{"TestTeardown", _xtest.TestTeardown},

	{"TestTick", _xtest.TestTick},

	{"TestNewTickerLtZeroDuration", _xtest.TestNewTickerLtZeroDuration},

	{"TestTickerResetLtZeroDuration", _xtest.TestTickerResetLtZeroDuration},

	{"TestLongAdjustTimers", _xtest.TestLongAdjustTimers},

	{"TestTimerGC", _xtest.TestTimerGC},

	{"TestChan", _xtest.TestChan},

	{"TestManualTicker", _xtest.TestManualTicker},

	{"TestAfterTimes", _xtest.TestAfterTimes},

	{"TestTickTimes", _xtest.TestTickTimes},

	{"TestInternal", _xtest.TestInternal},

	{"TestZeroTime", _xtest.TestZeroTime},

	{"TestZoneData", _xtest.TestZoneData},

	{"TestUnixUTC", _xtest.TestUnixUTC},

	{"TestUnixNanoUTC", _xtest.TestUnixNanoUTC},

	{"TestUnix", _xtest.TestUnix},

	{"TestUnixNano", _xtest.TestUnixNano},

	{"TestUnixUTCAndBack", _xtest.TestUnixUTCAndBack},

	{"TestUnixNanoUTCAndBack", _xtest.TestUnixNanoUTCAndBack},

	{"TestUnixMilli", _xtest.TestUnixMilli},

	{"TestUnixMicro", _xtest.TestUnixMicro},

	{"TestTruncateRound", _xtest.TestTruncateRound},

	{"TestISOWeek", _xtest.TestISOWeek},

	{"TestYearDay", _xtest.TestYearDay},

	{"TestDurationString", _xtest.TestDurationString},

	{"TestDate", _xtest.TestDate},

	{"TestAddDate", _xtest.TestAddDate},

	{"TestDaysIn", _xtest.TestDaysIn},

	{"TestAddToExactSecond", _xtest.TestAddToExactSecond},

	{"TestTimeGob", _xtest.TestTimeGob},

	{"TestInvalidTimeGob", _xtest.TestInvalidTimeGob},

	{"TestNotGobEncodableTime", _xtest.TestNotGobEncodableTime},

	{"TestTimeJSON", _xtest.TestTimeJSON},

	{"TestUnmarshalInvalidTimes", _xtest.TestUnmarshalInvalidTimes},

	{"TestMarshalInvalidTimes", _xtest.TestMarshalInvalidTimes},

	{"TestParseDuration", _xtest.TestParseDuration},

	{"TestParseDurationErrors", _xtest.TestParseDurationErrors},

	{"TestParseDurationRoundTrip", _xtest.TestParseDurationRoundTrip},

	{"TestLocationRace", _xtest.TestLocationRace},

	{"TestCountMallocs", _xtest.TestCountMallocs},

	{"TestLoadFixed", _xtest.TestLoadFixed},

	{"TestSub", _xtest.TestSub},

	{"TestDurationNanoseconds", _xtest.TestDurationNanoseconds},

	{"TestDurationMicroseconds", _xtest.TestDurationMicroseconds},

	{"TestDurationMilliseconds", _xtest.TestDurationMilliseconds},

	{"TestDurationSeconds", _xtest.TestDurationSeconds},

	{"TestDurationMinutes", _xtest.TestDurationMinutes},

	{"TestDurationHours", _xtest.TestDurationHours},

	{"TestDurationTruncate", _xtest.TestDurationTruncate},

	{"TestDurationRound", _xtest.TestDurationRound},

	{"TestDurationAbs", _xtest.TestDurationAbs},

	{"TestDefaultLoc", _xtest.TestDefaultLoc},

	{"TestMarshalBinaryZeroTime", _xtest.TestMarshalBinaryZeroTime},

	{"TestMarshalBinaryVersion2", _xtest.TestMarshalBinaryVersion2},

	{"TestUnmarshalTextAllocations", _xtest.TestUnmarshalTextAllocations},

	{"TestZeroMonthString", _xtest.TestZeroMonthString},

	{"TestWeekdayString", _xtest.TestWeekdayString},

	{"TestReadFileLimit", _xtest.TestReadFileLimit},

	{"TestConcurrentTimerReset", _xtest.TestConcurrentTimerReset},

	{"TestConcurrentTimerResetStop", _xtest.TestConcurrentTimerResetStop},

	{"TestTimeIsDST", _xtest.TestTimeIsDST},

	{"TestTimeAddSecOverflow", _xtest.TestTimeAddSecOverflow},

	{"TestTimeWithZoneTransition", _xtest.TestTimeWithZoneTransition},

	{"TestZoneBounds", _xtest.TestZoneBounds},

	{"TestEmbeddedTZData", _xtest.TestEmbeddedTZData},

	{"TestEnvVarUsage", _xtest.TestEnvVarUsage},

	{"TestBadLocationErrMsg", _xtest.TestBadLocationErrMsg},

	{"TestLoadLocationValidatesNames", _xtest.TestLoadLocationValidatesNames},

	{"TestVersion3", _xtest.TestVersion3},

	{"TestFirstZone", _xtest.TestFirstZone},

	{"TestLocationNames", _xtest.TestLocationNames},

	{"TestLoadLocationFromTZData", _xtest.TestLoadLocationFromTZData},

	{"TestEarlyLocation", _xtest.TestEarlyLocation},

	{"TestMalformedTZData", _xtest.TestMalformedTZData},

	{"TestLoadLocationFromTZDataSlim", _xtest.TestLoadLocationFromTZDataSlim},

	{"TestTzset", _xtest.TestTzset},

	{"TestTzsetName", _xtest.TestTzsetName},

	{"TestTzsetOffset", _xtest.TestTzsetOffset},

	{"TestTzsetRule", _xtest.TestTzsetRule},

	{"TestEnvTZUsage", _xtest.TestEnvTZUsage},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkAfterFunc1000", _xtest.BenchmarkAfterFunc1000},

	{"BenchmarkAfter", _xtest.BenchmarkAfter},

	{"BenchmarkStop", _xtest.BenchmarkStop},

	{"BenchmarkSimultaneousAfterFunc1000", _xtest.BenchmarkSimultaneousAfterFunc1000},

	{"BenchmarkStartStop1000", _xtest.BenchmarkStartStop1000},

	{"BenchmarkReset", _xtest.BenchmarkReset},

	{"BenchmarkSleep1000", _xtest.BenchmarkSleep1000},

	{"BenchmarkParallelTimerLatency", _xtest.BenchmarkParallelTimerLatency},

	{"BenchmarkStaggeredTickerLatency", _xtest.BenchmarkStaggeredTickerLatency},

	{"BenchmarkAdjustTimers10000", _xtest.BenchmarkAdjustTimers10000},

	{"BenchmarkTicker", _xtest.BenchmarkTicker},

	{"BenchmarkTickerReset", _xtest.BenchmarkTickerReset},

	{"BenchmarkTickerResetNaive", _xtest.BenchmarkTickerResetNaive},

	{"BenchmarkNow", _xtest.BenchmarkNow},

	{"BenchmarkNowUnixNano", _xtest.BenchmarkNowUnixNano},

	{"BenchmarkNowUnixMilli", _xtest.BenchmarkNowUnixMilli},

	{"BenchmarkNowUnixMicro", _xtest.BenchmarkNowUnixMicro},

	{"BenchmarkSince", _xtest.BenchmarkSince},

	{"BenchmarkUntil", _xtest.BenchmarkUntil},

	{"BenchmarkFormat", _xtest.BenchmarkFormat},

	{"BenchmarkFormatRFC3339", _xtest.BenchmarkFormatRFC3339},

	{"BenchmarkFormatRFC3339Nano", _xtest.BenchmarkFormatRFC3339Nano},

	{"BenchmarkFormatNow", _xtest.BenchmarkFormatNow},

	{"BenchmarkMarshalJSON", _xtest.BenchmarkMarshalJSON},

	{"BenchmarkMarshalText", _xtest.BenchmarkMarshalText},

	{"BenchmarkMarshalBinary", _xtest.BenchmarkMarshalBinary},

	{"BenchmarkParse", _xtest.BenchmarkParse},

	{"BenchmarkParseRFC3339UTC", _xtest.BenchmarkParseRFC3339UTC},

	{"BenchmarkParseRFC3339UTCBytes", _xtest.BenchmarkParseRFC3339UTCBytes},

	{"BenchmarkParseRFC3339TZ", _xtest.BenchmarkParseRFC3339TZ},

	{"BenchmarkParseRFC3339TZBytes", _xtest.BenchmarkParseRFC3339TZBytes},

	{"BenchmarkParseDuration", _xtest.BenchmarkParseDuration},

	{"BenchmarkHour", _xtest.BenchmarkHour},

	{"BenchmarkSecond", _xtest.BenchmarkSecond},

	{"BenchmarkDate", _xtest.BenchmarkDate},

	{"BenchmarkYear", _xtest.BenchmarkYear},

	{"BenchmarkYearDay", _xtest.BenchmarkYearDay},

	{"BenchmarkMonth", _xtest.BenchmarkMonth},

	{"BenchmarkDay", _xtest.BenchmarkDay},

	{"BenchmarkISOWeek", _xtest.BenchmarkISOWeek},

	{"BenchmarkGoString", _xtest.BenchmarkGoString},

	{"BenchmarkDateFunc", _xtest.BenchmarkDateFunc},

	{"BenchmarkUnmarshalText", _xtest.BenchmarkUnmarshalText},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzFormatRFC3339", _xtest.FuzzFormatRFC3339},

	{"FuzzParseRFC3339", _xtest.FuzzParseRFC3339},

}

var examples = []testing.InternalExample{

	{"ExampleDuration_Round", _xtest.ExampleDuration_Round, "d.Round(   1ns) = 1h15m30.918273645s\nd.Round(   1µs) = 1h15m30.918274s\nd.Round(   1ms) = 1h15m30.918s\nd.Round(    1s) = 1h15m31s\nd.Round(    2s) = 1h15m30s\nd.Round(  1m0s) = 1h16m0s\nd.Round( 10m0s) = 1h20m0s\nd.Round(1h0m0s) = 1h0m0s\n", false},

	{"ExampleDuration_String", _xtest.ExampleDuration_String, "1h2m0.3s\n300ms\n", false},

	{"ExampleDuration_Truncate", _xtest.ExampleDuration_Truncate, "d.Truncate(   1ns) = 1h15m30.918273645s\nd.Truncate(   1µs) = 1h15m30.918273s\nd.Truncate(   1ms) = 1h15m30.918s\nd.Truncate(    1s) = 1h15m30s\nd.Truncate(    2s) = 1h15m30s\nd.Truncate(  1m0s) = 1h15m0s\nd.Truncate( 10m0s) = 1h10m0s\nd.Truncate(1h0m0s) = 1h0m0s\n", false},

	{"ExampleParseDuration", _xtest.ExampleParseDuration, "10h0m0s\n1h10m10s\nThere are 4210 seconds in 1h10m10s.\nThere are 1000 nanoseconds in 1µs.\nThere are 1.00e-06 seconds in 1µs.\n", false},

	{"ExampleUntil", _xtest.ExampleUntil, "Duration until future time: 5 seconds\n", false},

	{"ExampleDuration_Abs", _xtest.ExampleDuration_Abs, "Absolute value of positive duration: 5s\nAbsolute value of negative duration: 3s\nAbsolute value of MinInt64 equal to MaxInt64: true\n", false},

	{"ExampleDuration_Hours", _xtest.ExampleDuration_Hours, "I've got 4.5 hours of work left.\n", false},

	{"ExampleDuration_Microseconds", _xtest.ExampleDuration_Microseconds, "One second is 1000000 microseconds.\n", false},

	{"ExampleDuration_Milliseconds", _xtest.ExampleDuration_Milliseconds, "One second is 1000 milliseconds.\n", false},

	{"ExampleDuration_Minutes", _xtest.ExampleDuration_Minutes, "The movie is 90 minutes long.\n", false},

	{"ExampleDuration_Nanoseconds", _xtest.ExampleDuration_Nanoseconds, "One microsecond is 1000 nanoseconds.\n", false},

	{"ExampleDuration_Seconds", _xtest.ExampleDuration_Seconds, "Take off in t-90 seconds.\n", false},

	{"ExampleDate", _xtest.ExampleDate, "Go launched at 2009-11-10 15:00:00 -0800 PST\n", false},

	{"ExampleTime_Format", _xtest.ExampleTime_Format, "default format: 2015-02-25 11:06:39 -0800 PST\nUnix format: Wed Feb 25 11:06:39 PST 2015\nSame, in UTC: Wed Feb 25 19:06:39 UTC 2015\nin Shanghai with seconds: 2015-02-26T03:06:39 +080000\nin Shanghai with colon seconds: 2015-02-26T03:06:39 +08:00:00\n\nFormats:\n\nBasic full date  \"Mon Jan 2 15:04:05 MST 2006\" gives \"Wed Feb 25 11:06:39 PST 2015\"\nBasic short date \"2006/01/02\" gives \"2015/02/25\"\nAM/PM            \"3PM==3pm==15h\" gives \"11AM==11am==11h\"\nNo fraction      \"Mon Jan _2 15:04:05 MST 2006\" gives \"Wed Feb 25 11:06:39 PST 2015\"\n0s for fraction  \"15:04:05.00000\" gives \"11:06:39.12340\"\n9s for fraction  \"15:04:05.99999999\" gives \"11:06:39.1234\"\n", false},

	{"ExampleTime_Format_pad", _xtest.ExampleTime_Format_pad, "Unix             \"Mon Jan _2 15:04:05 MST 2006\" gives \"Sat Mar  7 11:06:39 PST 2015\"\nNo pad           \"<2>\" gives \"<7>\"\nSpaces           \"<_2>\" gives \"< 7>\"\nZeros            \"<02>\" gives \"<07>\"\nSuppressed pad   \"04:05\" gives \"06:39\"\n", false},

	{"ExampleTime_GoString", _xtest.ExampleTime_GoString, "time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)\ntime.Date(2009, time.November, 10, 23, 1, 0, 0, time.UTC)\ntime.Date(2009, time.December, 10, 23, 1, 0, 0, time.UTC)\ntime.Date(2013, time.February, 3, 19, 54, 0, 0, time.UTC)\n", false},

	{"ExampleParse", _xtest.ExampleParse, "2013-02-03 19:54:00 -0800 PST\n2013-02-03 00:00:00 +0000 UTC\n2006-01-02 15:04:05 +0000 UTC\n2006-01-02 15:04:05 +0700 +0700\nerror parsing time \"2006-01-02T15:04:05Z07:00\": extra text: \"07:00\"\n", false},

	{"ExampleParseInLocation", _xtest.ExampleParseInLocation, "2012-07-09 05:02:00 +0200 CEST\n2012-07-09 00:00:00 +0200 CEST\n", false},

	{"ExampleUnix", _xtest.ExampleUnix, "1257894000\n2009-11-10 23:00:00 +0000 UTC\n", false},

	{"ExampleUnixMicro", _xtest.ExampleUnixMicro, "1257894000000000\n2009-11-10 23:00:00 +0000 UTC\n", false},

	{"ExampleUnixMilli", _xtest.ExampleUnixMilli, "1257894000000\n2009-11-10 23:00:00 +0000 UTC\n", false},

	{"ExampleTime_Unix", _xtest.ExampleTime_Unix, "2001-09-09 01:46:40 +0000 UTC\n2001-09-09 01:46:40 +0000 UTC\n2001-09-09 01:46:40 +0000 UTC\n1000000000\n1000000000000000000\n", false},

	{"ExampleTime_Round", _xtest.ExampleTime_Round, "t.Round(   1ns) = 12:15:30.918273645\nt.Round(   1µs) = 12:15:30.918274\nt.Round(   1ms) = 12:15:30.918\nt.Round(    1s) = 12:15:31\nt.Round(    2s) = 12:15:30\nt.Round(  1m0s) = 12:16:00\nt.Round( 10m0s) = 12:20:00\nt.Round(1h0m0s) = 12:00:00\n", false},

	{"ExampleTime_Truncate", _xtest.ExampleTime_Truncate, "t.Truncate(  1ns) = 12:15:30.918273645\nt.Truncate(  1µs) = 12:15:30.918273\nt.Truncate(  1ms) = 12:15:30.918\nt.Truncate(   1s) = 12:15:30\nt.Truncate(   2s) = 12:15:30\nt.Truncate( 1m0s) = 12:15:00\nt.Truncate(10m0s) = 12:10:00\n", false},

	{"ExampleLoadLocation", _xtest.ExampleLoadLocation, "2018-08-30 05:00:00 -0700 PDT\n", false},

	{"ExampleLocation", _xtest.ExampleLocation, "true\n", false},

	{"ExampleTime_Add", _xtest.ExampleTime_Add, "start = 2009-01-01 12:00:00 +0000 UTC\nstart.Add(time.Second * 10) = 2009-01-01 12:00:10 +0000 UTC\nstart.Add(time.Minute * 10) = 2009-01-01 12:10:00 +0000 UTC\nstart.Add(time.Hour * 10) = 2009-01-01 22:00:00 +0000 UTC\nstart.Add(time.Hour * 24 * 10) = 2009-01-11 12:00:00 +0000 UTC\n", false},

	{"ExampleTime_AddDate", _xtest.ExampleTime_AddDate, "oneDayLater: start.AddDate(0, 0, 1) = 2023-03-26 12:00:00 +0000 UTC\noneMonthLater: start.AddDate(0, 1, 0) = 2023-04-25 12:00:00 +0000 UTC\noneYearLater: start.AddDate(1, 0, 0) = 2024-03-25 12:00:00 +0000 UTC\noneDayLaterZurich: startZurich.AddDate(0, 0, 1) = 2023-03-26 12:00:00 +0200 CEST\nDay duration in UTC: 24h0m0s | Day duration in Zürich: 23h0m0s\n", false},

	{"ExampleTime_After", _xtest.ExampleTime_After, "year3000.After(year2000) = true\nyear2000.After(year3000) = false\n", false},

	{"ExampleTime_Before", _xtest.ExampleTime_Before, "year2000.Before(year3000) = true\nyear3000.Before(year2000) = false\n", false},

	{"ExampleTime_Date", _xtest.ExampleTime_Date, "year = 2000\nmonth = February\nday = 1\n", false},

	{"ExampleTime_Day", _xtest.ExampleTime_Day, "day = 1\n", false},

	{"ExampleTime_Equal", _xtest.ExampleTime_Equal, "datesEqualUsingEqualOperator = false\ndatesEqualUsingFunction = true\n", false},

	{"ExampleTime_String", _xtest.ExampleTime_String, "withNanoseconds = 2000-02-01 12:13:14.000000015 +0000 UTC\nwithoutNanoseconds = 2000-02-01 12:13:14 +0000 UTC\n", false},

	{"ExampleTime_Sub", _xtest.ExampleTime_Sub, "difference = 12h0m0s\n", false},

	{"ExampleTime_AppendBinary", _xtest.ExampleTime_AppendBinary, "t: 2025-04-01 15:30:45.123456789 +0000 UTC\nparseTime: 2025-04-01 15:30:45.123456789 +0000 UTC\nequal: true\n", false},

	{"ExampleTime_AppendFormat", _xtest.ExampleTime_AppendFormat, "Time: 11:00AM\n", false},

	{"ExampleTime_AppendText", _xtest.ExampleTime_AppendText, "t: 2025-04-01T15:30:45.123456789Z\n", false},

	{"ExampleFixedZone", _xtest.ExampleFixedZone, "The time is: 10 Nov 09 23:00 UTC-8\n", false},

}

func init() {

	testdeps.ImportPath = "time"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

