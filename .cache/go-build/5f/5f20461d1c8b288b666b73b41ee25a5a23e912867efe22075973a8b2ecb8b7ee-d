
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "encoding/xml"


	_xtest "encoding/xml_test"

)

var tests = []testing.InternalTest{

	{"TestMarshal", _test.TestMarshal},

	{"TestMarshalErrors", _test.TestMarshalErrors},

	{"TestUnmarshal", _test.TestUnmarshal},

	{"TestMarshalIndent", _test.TestMarshalIndent},

	{"TestMarshalWriteErrors", _test.TestMarshalWriteErrors},

	{"TestMarshalWriteIOErrors", _test.TestMarshalWriteIOErrors},

	{"TestMarshalFlush", _test.TestMarshalFlush},

	{"TestStructPointerMarshal", _test.TestStructPointerMarshal},

	{"TestEncodeToken", _test.TestEncodeToken},

	{"TestProcInstEncodeToken", _test.TestProcInstEncodeToken},

	{"TestDecodeEncode", _test.TestDecodeEncode},

	{"TestRace9796", _test.TestRace9796},

	{"TestIsValidDirective", _test.TestIsValidDirective},

	{"TestSimpleUseOfEncodeToken", _test.TestSimpleUseOfEncodeToken},

	{"TestIssue16158", _test.TestIssue16158},

	{"TestInvalidXMLName", _test.TestInvalidXMLName},

	{"TestMarshalZeroValue", _test.TestMarshalZeroValue},

	{"TestClose", _test.TestClose},

	{"TestUnmarshalFeed", _test.TestUnmarshalFeed},

	{"TestUnmarshalPaths", _test.TestUnmarshalPaths},

	{"TestUnmarshalBadPaths", _test.TestUnmarshalBadPaths},

	{"TestUnmarshalWithoutNameType", _test.TestUnmarshalWithoutNameType},

	{"TestUnmarshalAttr", _test.TestUnmarshalAttr},

	{"TestUnmarshalNS", _test.TestUnmarshalNS},

	{"TestMarshalNS", _test.TestMarshalNS},

	{"TestUnmarshalNSAttr", _test.TestUnmarshalNSAttr},

	{"TestMarshalNSAttr", _test.TestMarshalNSAttr},

	{"TestUnmarshaler", _test.TestUnmarshaler},

	{"TestUnmarshalIntoInterface", _test.TestUnmarshalIntoInterface},

	{"TestMalformedComment", _test.TestMalformedComment},

	{"TestInvalidInnerXMLType", _test.TestInvalidInnerXMLType},

	{"TestUnmarshalEmptyValues", _test.TestUnmarshalEmptyValues},

	{"TestUnmarshalWhitespaceValues", _test.TestUnmarshalWhitespaceValues},

	{"TestUnmarshalWhitespaceAttrs", _test.TestUnmarshalWhitespaceAttrs},

	{"TestUnmarshalIntoNil", _test.TestUnmarshalIntoNil},

	{"TestCVE202228131", _test.TestCVE202228131},

	{"TestCVE202230633", _test.TestCVE202230633},

	{"TestDecodeEOF", _test.TestDecodeEOF},

	{"TestDecodeNilToken", _test.TestDecodeNilToken},

	{"TestRawToken", _test.TestRawToken},

	{"TestNonStrictRawToken", _test.TestNonStrictRawToken},

	{"TestRawTokenAltEncoding", _test.TestRawTokenAltEncoding},

	{"TestRawTokenAltEncodingNoConverter", _test.TestRawTokenAltEncodingNoConverter},

	{"TestNestedDirectives", _test.TestNestedDirectives},

	{"TestToken", _test.TestToken},

	{"TestSyntax", _test.TestSyntax},

	{"TestInputLinePos", _test.TestInputLinePos},

	{"TestAllScalars", _test.TestAllScalars},

	{"TestIssue68387", _test.TestIssue68387},

	{"TestIssue569", _test.TestIssue569},

	{"TestUnquotedAttrs", _test.TestUnquotedAttrs},

	{"TestValuelessAttrs", _test.TestValuelessAttrs},

	{"TestCopyTokenCharData", _test.TestCopyTokenCharData},

	{"TestCopyTokenStartElement", _test.TestCopyTokenStartElement},

	{"TestCopyTokenComment", _test.TestCopyTokenComment},

	{"TestSyntaxErrorLineNum", _test.TestSyntaxErrorLineNum},

	{"TestTrailingRawToken", _test.TestTrailingRawToken},

	{"TestTrailingToken", _test.TestTrailingToken},

	{"TestEntityInsideCDATA", _test.TestEntityInsideCDATA},

	{"TestDisallowedCharacters", _test.TestDisallowedCharacters},

	{"TestIsInCharacterRange", _test.TestIsInCharacterRange},

	{"TestProcInstEncoding", _test.TestProcInstEncoding},

	{"TestDirectivesWithComments", _test.TestDirectivesWithComments},

	{"TestEscapeTextIOErrors", _test.TestEscapeTextIOErrors},

	{"TestEscapeTextInvalidChar", _test.TestEscapeTextInvalidChar},

	{"TestIssue5880", _test.TestIssue5880},

	{"TestIssue8535", _test.TestIssue8535},

	{"TestEncodeXMLNS", _test.TestEncodeXMLNS},

	{"TestIssue11405", _test.TestIssue11405},

	{"TestIssue12417", _test.TestIssue12417},

	{"TestIssue7113", _test.TestIssue7113},

	{"TestIssue20396", _test.TestIssue20396},

	{"TestIssue20685", _test.TestIssue20685},

	{"TestNewTokenDecoderIdempotent", _test.TestNewTokenDecoderIdempotent},

	{"TestWrapDecoder", _test.TestWrapDecoder},

	{"TestTokenUnmarshaler", _test.TestTokenUnmarshaler},

	{"TestRoundTrip", _test.TestRoundTrip},

	{"TestParseErrors", _test.TestParseErrors},

	{"TestHTMLAutoClose", _test.TestHTMLAutoClose},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkMarshal", _test.BenchmarkMarshal},

	{"BenchmarkUnmarshal", _test.BenchmarkUnmarshal},

	{"BenchmarkHTMLAutoClose", _test.BenchmarkHTMLAutoClose},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"Example_customMarshalXML", _xtest.Example_customMarshalXML, "Zoo Census:\n* Gophers: 3\n* Zebras:  2\n* Unknown: 3\n", false},

	{"ExampleMarshalIndent", _xtest.ExampleMarshalIndent, "  <person id=\"13\">\n      <name>\n          <first>John</first>\n          <last>Doe</last>\n      </name>\n      <age>42</age>\n      <Married>false</Married>\n      <City>Hanga Roa</City>\n      <State>Easter Island</State>\n      <!-- Need more details. -->\n  </person>\n", false},

	{"ExampleEncoder", _xtest.ExampleEncoder, "  <person id=\"13\">\n      <name>\n          <first>John</first>\n          <last>Doe</last>\n      </name>\n      <age>42</age>\n      <Married>false</Married>\n      <City>Hanga Roa</City>\n      <State>Easter Island</State>\n      <!-- Need more details. -->\n  </person>\n", false},

	{"ExampleUnmarshal", _xtest.ExampleUnmarshal, "XMLName: xml.Name{Space:\"\", Local:\"Person\"}\nName: \"Grace R. Emlin\"\nPhone: \"none\"\nEmail: [{home gre@example.com} {work gre@work.com}]\nGroups: [Friends Squash]\nAddress: {Hanga Roa Easter Island}\n", false},

	{"Example_textMarshalXML", _xtest.Example_textMarshalXML, "Inventory Counts:\n* Small:        3\n* Large:        2\n* Unrecognized: 3\n", false},

}

func init() {

	testdeps.ImportPath = "encoding/xml"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

