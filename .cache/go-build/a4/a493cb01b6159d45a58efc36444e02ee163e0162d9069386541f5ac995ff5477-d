
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "slices"


	_xtest "slices_test"

)

var tests = []testing.InternalTest{

	{"TestAll", _xtest.TestAll},

	{"TestBackward", _xtest.TestBackward},

	{"TestValues", _xtest.TestValues},

	{"TestAppendSeq", _xtest.TestAppendSeq},

	{"TestCollect", _xtest.TestCollect},

	{"TestValuesAppendSeq", _xtest.TestValuesAppendSeq},

	{"TestValuesCollect", _xtest.TestValuesCollect},

	{"TestSorted", _xtest.TestSorted},

	{"TestSortedFunc", _xtest.TestSortedFunc},

	{"TestSortedStableFunc", _xtest.TestSortedStableFunc},

	{"TestChunk", _xtest.TestChunk},

	{"TestChunkPanics", _xtest.TestChunkPanics},

	{"TestChunkRange", _xtest.TestChunkRange},

	{"TestEqual", _xtest.TestEqual},

	{"TestEqualFunc", _xtest.TestEqualFunc},

	{"TestCompare", _xtest.TestCompare},

	{"TestCompareFunc", _xtest.TestCompareFunc},

	{"TestIndex", _xtest.TestIndex},

	{"TestIndexFunc", _xtest.TestIndexFunc},

	{"TestContains", _xtest.TestContains},

	{"TestContainsFunc", _xtest.TestContainsFunc},

	{"TestInsert", _xtest.TestInsert},

	{"TestInsertOverlap", _xtest.TestInsertOverlap},

	{"TestInsertPanics", _xtest.TestInsertPanics},

	{"TestDelete", _xtest.TestDelete},

	{"TestDeleteFunc", _xtest.TestDeleteFunc},

	{"TestDeletePanics", _xtest.TestDeletePanics},

	{"TestDeleteClearTail", _xtest.TestDeleteClearTail},

	{"TestDeleteFuncClearTail", _xtest.TestDeleteFuncClearTail},

	{"TestClone", _xtest.TestClone},

	{"TestCompact", _xtest.TestCompact},

	{"TestCompactFunc", _xtest.TestCompactFunc},

	{"TestCompactClearTail", _xtest.TestCompactClearTail},

	{"TestCompactFuncClearTail", _xtest.TestCompactFuncClearTail},

	{"TestGrow", _xtest.TestGrow},

	{"TestClip", _xtest.TestClip},

	{"TestReverse", _xtest.TestReverse},

	{"TestReplace", _xtest.TestReplace},

	{"TestReplacePanics", _xtest.TestReplacePanics},

	{"TestReplaceGrow", _xtest.TestReplaceGrow},

	{"TestReplaceClearTail", _xtest.TestReplaceClearTail},

	{"TestReplaceOverlap", _xtest.TestReplaceOverlap},

	{"TestReplaceEndClearTail", _xtest.TestReplaceEndClearTail},

	{"TestInsertGrowthRate", _xtest.TestInsertGrowthRate},

	{"TestReplaceGrowthRate", _xtest.TestReplaceGrowthRate},

	{"TestInference", _xtest.TestInference},

	{"TestConcat", _xtest.TestConcat},

	{"TestConcat_too_large", _xtest.TestConcat_too_large},

	{"TestRepeat", _xtest.TestRepeat},

	{"TestRepeatPanics", _xtest.TestRepeatPanics},

	{"TestIssue68488", _xtest.TestIssue68488},

	{"TestNilness", _xtest.TestNilness},

	{"TestSortIntSlice", _xtest.TestSortIntSlice},

	{"TestSortFuncIntSlice", _xtest.TestSortFuncIntSlice},

	{"TestSortFloat64Slice", _xtest.TestSortFloat64Slice},

	{"TestSortStringSlice", _xtest.TestSortStringSlice},

	{"TestSortLarge_Random", _xtest.TestSortLarge_Random},

	{"TestStability", _xtest.TestStability},

	{"TestMinMax", _xtest.TestMinMax},

	{"TestMinMaxNaNs", _xtest.TestMinMaxNaNs},

	{"TestMinMaxPanics", _xtest.TestMinMaxPanics},

	{"TestBinarySearch", _xtest.TestBinarySearch},

	{"TestBinarySearchInts", _xtest.TestBinarySearchInts},

	{"TestBinarySearchFloats", _xtest.TestBinarySearchFloats},

	{"TestBinarySearchFunc", _xtest.TestBinarySearchFunc},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkEqualFunc_Large", _xtest.BenchmarkEqualFunc_Large},

	{"BenchmarkIndex_Large", _xtest.BenchmarkIndex_Large},

	{"BenchmarkIndexFunc_Large", _xtest.BenchmarkIndexFunc_Large},

	{"BenchmarkCompact", _xtest.BenchmarkCompact},

	{"BenchmarkCompact_Large", _xtest.BenchmarkCompact_Large},

	{"BenchmarkCompactFunc", _xtest.BenchmarkCompactFunc},

	{"BenchmarkCompactFunc_Large", _xtest.BenchmarkCompactFunc_Large},

	{"BenchmarkReplace", _xtest.BenchmarkReplace},

	{"BenchmarkBinarySearchFloats", _xtest.BenchmarkBinarySearchFloats},

	{"BenchmarkBinarySearchFuncStruct", _xtest.BenchmarkBinarySearchFuncStruct},

	{"BenchmarkSortFuncStruct", _xtest.BenchmarkSortFuncStruct},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleBinarySearch", _xtest.ExampleBinarySearch, "Vera: 2 true\nBill: 1 false\n", false},

	{"ExampleBinarySearchFunc", _xtest.ExampleBinarySearchFunc, "Bob: 1 true\n", false},

	{"ExampleCompact", _xtest.ExampleCompact, "[0 1 2 3 5 8]\n", false},

	{"ExampleCompactFunc", _xtest.ExampleCompactFunc, "[bob alice Vera]\n", false},

	{"ExampleCompare", _xtest.ExampleCompare, "Equal: 0\nV < X: -1\nV > C: 1\n3 > 2: 1\n", false},

	{"ExampleCompareFunc", _xtest.ExampleCompareFunc, "1\n", false},

	{"ExampleContainsFunc", _xtest.ExampleContainsFunc, "Has a negative: true\nHas an odd number: false\n", false},

	{"ExampleDelete", _xtest.ExampleDelete, "[a e]\n", false},

	{"ExampleDeleteFunc", _xtest.ExampleDeleteFunc, "[0 2 8]\n", false},

	{"ExampleEqual", _xtest.ExampleEqual, "true\nfalse\n", false},

	{"ExampleEqualFunc", _xtest.ExampleEqualFunc, "true\n", false},

	{"ExampleIndex", _xtest.ExampleIndex, "2\n-1\n", false},

	{"ExampleIndexFunc", _xtest.ExampleIndexFunc, "First negative at index 2\n", false},

	{"ExampleInsert", _xtest.ExampleInsert, "[Alice Bill Billie Bob Vera Zac]\n", false},

	{"ExampleIsSorted", _xtest.ExampleIsSorted, "true\nfalse\n", false},

	{"ExampleIsSortedFunc", _xtest.ExampleIsSortedFunc, "true\nfalse\n", false},

	{"ExampleMax", _xtest.ExampleMax, "42\n", false},

	{"ExampleMaxFunc", _xtest.ExampleMaxFunc, "Alice\n", false},

	{"ExampleMin", _xtest.ExampleMin, "-10\n", false},

	{"ExampleMinFunc", _xtest.ExampleMinFunc, "Bob\n", false},

	{"ExampleReplace", _xtest.ExampleReplace, "[Alice Bill Billie Cat Zac]\n", false},

	{"ExampleReverse", _xtest.ExampleReverse, "[VERA Bob alice]\n", false},

	{"ExampleSort", _xtest.ExampleSort, "[-10 0 8 42]\n", false},

	{"ExampleSortFunc_caseInsensitive", _xtest.ExampleSortFunc_caseInsensitive, "[alice Bob VERA]\n", false},

	{"ExampleSortFunc_multiField", _xtest.ExampleSortFunc_multiField, "[{Alice 20} {Alice 55} {Bob 24} {Gopher 13}]\n", false},

	{"ExampleSortStableFunc", _xtest.ExampleSortStableFunc, "[{Alice 20} {Alice 55} {Bob 24} {Gopher 13}]\n", false},

	{"ExampleClone", _xtest.ExampleClone, "[0 42 -10 8]\n[0 42 -10 8]\n[0 42 10 8]\n", false},

	{"ExampleGrow", _xtest.ExampleGrow, "4\n[0 42 -10 8]\n4\n8\n", false},

	{"ExampleClip", _xtest.ExampleClip, "10\n[0 1 2 3]\n4\n4\n", false},

	{"ExampleConcat", _xtest.ExampleConcat, "[0 1 2 3 4 5 6]\n", false},

	{"ExampleContains", _xtest.ExampleContains, "true\nfalse\n", false},

	{"ExampleRepeat", _xtest.ExampleRepeat, "[0 1 2 3 0 1 2 3]\n", false},

	{"ExampleAll", _xtest.ExampleAll, "0 : Alice\n1 : Bob\n2 : Vera\n", false},

	{"ExampleBackward", _xtest.ExampleBackward, "2 : Vera\n1 : Bob\n0 : Alice\n", false},

	{"ExampleValues", _xtest.ExampleValues, "Alice\nBob\nVera\n", false},

	{"ExampleAppendSeq", _xtest.ExampleAppendSeq, "[1 2 0 2 4 6 8]\n", false},

	{"ExampleCollect", _xtest.ExampleCollect, "[0 2 4 6 8]\n", false},

	{"ExampleSorted", _xtest.ExampleSorted, "[-6 -2 0 4 8]\ntrue\n", false},

	{"ExampleSortedFunc", _xtest.ExampleSortedFunc, "[8 4 0 -2 -6]\n", false},

	{"ExampleSortedStableFunc", _xtest.ExampleSortedStableFunc, "[{Bob 5} {Gopher 13} {Alice 20} {Zac 20} {Vera 24}]\n", false},

	{"ExampleChunk", _xtest.ExampleChunk, "[{Gopher 13} {Alice 20}]\n[{Bob 5} {Vera 24}]\n[{Zac 15}]\n", false},

}

func init() {

	testdeps.ImportPath = "slices"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

