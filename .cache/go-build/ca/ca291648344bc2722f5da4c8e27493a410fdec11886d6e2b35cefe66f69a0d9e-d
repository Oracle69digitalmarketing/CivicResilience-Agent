
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "go/constant"


	_xtest "go/constant_test"

)

var tests = []testing.InternalTest{

	{"TestNumbers", _test.TestNumbers},

	{"TestOps", _test.TestOps},

	{"TestString", _test.TestString},

	{"TestFractions", _test.TestFractions},

	{"TestBytes", _test.TestBytes},

	{"TestUnknown", _test.TestUnknown},

	{"TestMakeFloat64", _test.TestMakeFloat64},

	{"TestMake", _test.TestMake},

	{"TestBitLen", _test.TestBitLen},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkStringAdd", _test.BenchmarkStringAdd},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"Example_complexNumbers", _xtest.Example_complexNumbers, "\nCould not represent real part 25.3 exactly as float64\nliteral (25.3+55i)\ngo/constant (25.3 + 55i)\ncomplex128 (25.299999999999997+55i)\n", false},

	{"ExampleBinaryOp", _xtest.ExampleBinaryOp, "22\n", false},

	{"ExampleUnaryOp", _xtest.ExampleUnaryOp, "\nfalse\n-2.7\n65493\n", false},

	{"ExampleCompare", _xtest.ExampleCompare, "\nFrame\nZ\na\nbacon\ndefer\ngo\n", false},

	{"ExampleSign", _xtest.ExampleSign, "\n-1 -1\n-1 (0 + -1i)\n-1 (1 + -1i)\n-1 (-1 + 1i)\n-1 (-1 + -1i)\n 0 0\n 0 (0 + 0i)\n 1 1\n 1 (0 + 1i)\n 1 (1 + 1i)\n", false},

	{"ExampleVal", _xtest.ExampleVal, "\n9223372036854775807\n6121026514868073/2251799813685248\ntrue\nfalse\n", false},

}

func init() {

	testdeps.ImportPath = "go/constant"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

