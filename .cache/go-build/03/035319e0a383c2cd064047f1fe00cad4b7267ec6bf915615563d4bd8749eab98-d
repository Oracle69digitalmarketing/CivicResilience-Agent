
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "math/bits"


	_xtest "math/bits_test"

)

var tests = []testing.InternalTest{

	{"TestUintSize", _xtest.TestUintSize},

	{"TestLeadingZeros", _xtest.TestLeadingZeros},

	{"TestTrailingZeros", _xtest.TestTrailingZeros},

	{"TestOnesCount", _xtest.TestOnesCount},

	{"TestRotateLeft", _xtest.TestRotateLeft},

	{"TestReverse", _xtest.TestReverse},

	{"TestReverseBytes", _xtest.TestReverseBytes},

	{"TestLen", _xtest.TestLen},

	{"TestAddSubUint", _xtest.TestAddSubUint},

	{"TestAddSubUint32", _xtest.TestAddSubUint32},

	{"TestAddSubUint64", _xtest.TestAddSubUint64},

	{"TestAdd64OverflowPanic", _xtest.TestAdd64OverflowPanic},

	{"TestSub64OverflowPanic", _xtest.TestSub64OverflowPanic},

	{"TestMulDiv", _xtest.TestMulDiv},

	{"TestMulDiv32", _xtest.TestMulDiv32},

	{"TestMulDiv64", _xtest.TestMulDiv64},

	{"TestDivPanicOverflow", _xtest.TestDivPanicOverflow},

	{"TestDiv32PanicOverflow", _xtest.TestDiv32PanicOverflow},

	{"TestDiv64PanicOverflow", _xtest.TestDiv64PanicOverflow},

	{"TestDivPanicZero", _xtest.TestDivPanicZero},

	{"TestDiv32PanicZero", _xtest.TestDiv32PanicZero},

	{"TestDiv64PanicZero", _xtest.TestDiv64PanicZero},

	{"TestRem32", _xtest.TestRem32},

	{"TestRem32Overflow", _xtest.TestRem32Overflow},

	{"TestRem64", _xtest.TestRem64},

	{"TestRem64Overflow", _xtest.TestRem64Overflow},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkLeadingZeros", _xtest.BenchmarkLeadingZeros},

	{"BenchmarkLeadingZeros8", _xtest.BenchmarkLeadingZeros8},

	{"BenchmarkLeadingZeros16", _xtest.BenchmarkLeadingZeros16},

	{"BenchmarkLeadingZeros32", _xtest.BenchmarkLeadingZeros32},

	{"BenchmarkLeadingZeros64", _xtest.BenchmarkLeadingZeros64},

	{"BenchmarkTrailingZeros", _xtest.BenchmarkTrailingZeros},

	{"BenchmarkTrailingZeros8", _xtest.BenchmarkTrailingZeros8},

	{"BenchmarkTrailingZeros16", _xtest.BenchmarkTrailingZeros16},

	{"BenchmarkTrailingZeros32", _xtest.BenchmarkTrailingZeros32},

	{"BenchmarkTrailingZeros64", _xtest.BenchmarkTrailingZeros64},

	{"BenchmarkOnesCount", _xtest.BenchmarkOnesCount},

	{"BenchmarkOnesCount8", _xtest.BenchmarkOnesCount8},

	{"BenchmarkOnesCount16", _xtest.BenchmarkOnesCount16},

	{"BenchmarkOnesCount32", _xtest.BenchmarkOnesCount32},

	{"BenchmarkOnesCount64", _xtest.BenchmarkOnesCount64},

	{"BenchmarkRotateLeft", _xtest.BenchmarkRotateLeft},

	{"BenchmarkRotateLeft8", _xtest.BenchmarkRotateLeft8},

	{"BenchmarkRotateLeft16", _xtest.BenchmarkRotateLeft16},

	{"BenchmarkRotateLeft32", _xtest.BenchmarkRotateLeft32},

	{"BenchmarkRotateLeft64", _xtest.BenchmarkRotateLeft64},

	{"BenchmarkReverse", _xtest.BenchmarkReverse},

	{"BenchmarkReverse8", _xtest.BenchmarkReverse8},

	{"BenchmarkReverse16", _xtest.BenchmarkReverse16},

	{"BenchmarkReverse32", _xtest.BenchmarkReverse32},

	{"BenchmarkReverse64", _xtest.BenchmarkReverse64},

	{"BenchmarkReverseBytes", _xtest.BenchmarkReverseBytes},

	{"BenchmarkReverseBytes16", _xtest.BenchmarkReverseBytes16},

	{"BenchmarkReverseBytes32", _xtest.BenchmarkReverseBytes32},

	{"BenchmarkReverseBytes64", _xtest.BenchmarkReverseBytes64},

	{"BenchmarkAdd", _xtest.BenchmarkAdd},

	{"BenchmarkAdd32", _xtest.BenchmarkAdd32},

	{"BenchmarkAdd64", _xtest.BenchmarkAdd64},

	{"BenchmarkAdd64multiple", _xtest.BenchmarkAdd64multiple},

	{"BenchmarkSub", _xtest.BenchmarkSub},

	{"BenchmarkSub32", _xtest.BenchmarkSub32},

	{"BenchmarkSub64", _xtest.BenchmarkSub64},

	{"BenchmarkSub64multiple", _xtest.BenchmarkSub64multiple},

	{"BenchmarkMul", _xtest.BenchmarkMul},

	{"BenchmarkMul32", _xtest.BenchmarkMul32},

	{"BenchmarkMul64", _xtest.BenchmarkMul64},

	{"BenchmarkDiv", _xtest.BenchmarkDiv},

	{"BenchmarkDiv32", _xtest.BenchmarkDiv32},

	{"BenchmarkDiv64", _xtest.BenchmarkDiv64},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleAdd32", _xtest.ExampleAdd32, "[33 12] + [21 23] = [54 35] (carry bit was 0)\n[1 2147483648] + [1 2147483648] = [3 0] (carry bit was 1)\n", false},

	{"ExampleAdd64", _xtest.ExampleAdd64, "[33 12] + [21 23] = [54 35] (carry bit was 0)\n[1 9223372036854775808] + [1 9223372036854775808] = [3 0] (carry bit was 1)\n", false},

	{"ExampleSub32", _xtest.ExampleSub32, "[33 23] - [21 12] = [12 11] (carry bit was 0)\n[3 2147483647] - [1 2147483648] = [1 4294967295] (carry bit was 1)\n", false},

	{"ExampleSub64", _xtest.ExampleSub64, "[33 23] - [21 12] = [12 11] (carry bit was 0)\n[3 9223372036854775807] - [1 9223372036854775808] = [1 18446744073709551615] (carry bit was 1)\n", false},

	{"ExampleMul32", _xtest.ExampleMul32, "12 * 12 = [0 144]\n2147483648 * 2 = [1 0]\n", false},

	{"ExampleMul64", _xtest.ExampleMul64, "12 * 12 = [0 144]\n9223372036854775808 * 2 = [1 0]\n", false},

	{"ExampleDiv32", _xtest.ExampleDiv32, "[0 6] / 3 = [2 0]\n[2 2147483648] / 2147483648 = [5 0]\n", false},

	{"ExampleDiv64", _xtest.ExampleDiv64, "[0 6] / 3 = [2 0]\n[2 9223372036854775808] / 9223372036854775808 = [5 0]\n", false},

	{"ExampleLeadingZeros8", _xtest.ExampleLeadingZeros8, "LeadingZeros8(00000001) = 7\n", false},

	{"ExampleLeadingZeros16", _xtest.ExampleLeadingZeros16, "LeadingZeros16(0000000000000001) = 15\n", false},

	{"ExampleLeadingZeros32", _xtest.ExampleLeadingZeros32, "LeadingZeros32(00000000000000000000000000000001) = 31\n", false},

	{"ExampleLeadingZeros64", _xtest.ExampleLeadingZeros64, "LeadingZeros64(0000000000000000000000000000000000000000000000000000000000000001) = 63\n", false},

	{"ExampleTrailingZeros8", _xtest.ExampleTrailingZeros8, "TrailingZeros8(00001110) = 1\n", false},

	{"ExampleTrailingZeros16", _xtest.ExampleTrailingZeros16, "TrailingZeros16(0000000000001110) = 1\n", false},

	{"ExampleTrailingZeros32", _xtest.ExampleTrailingZeros32, "TrailingZeros32(00000000000000000000000000001110) = 1\n", false},

	{"ExampleTrailingZeros64", _xtest.ExampleTrailingZeros64, "TrailingZeros64(0000000000000000000000000000000000000000000000000000000000001110) = 1\n", false},

	{"ExampleOnesCount", _xtest.ExampleOnesCount, "OnesCount(1110) = 3\n", false},

	{"ExampleOnesCount8", _xtest.ExampleOnesCount8, "OnesCount8(00001110) = 3\n", false},

	{"ExampleOnesCount16", _xtest.ExampleOnesCount16, "OnesCount16(0000000000001110) = 3\n", false},

	{"ExampleOnesCount32", _xtest.ExampleOnesCount32, "OnesCount32(00000000000000000000000000001110) = 3\n", false},

	{"ExampleOnesCount64", _xtest.ExampleOnesCount64, "OnesCount64(0000000000000000000000000000000000000000000000000000000000001110) = 3\n", false},

	{"ExampleRotateLeft8", _xtest.ExampleRotateLeft8, "00001111\n00111100\n11000011\n", false},

	{"ExampleRotateLeft16", _xtest.ExampleRotateLeft16, "0000000000001111\n0000000000111100\n1100000000000011\n", false},

	{"ExampleRotateLeft32", _xtest.ExampleRotateLeft32, "00000000000000000000000000001111\n00000000000000000000000000111100\n11000000000000000000000000000011\n", false},

	{"ExampleRotateLeft64", _xtest.ExampleRotateLeft64, "0000000000000000000000000000000000000000000000000000000000001111\n0000000000000000000000000000000000000000000000000000000000111100\n1100000000000000000000000000000000000000000000000000000000000011\n", false},

	{"ExampleReverse8", _xtest.ExampleReverse8, "00010011\n11001000\n", false},

	{"ExampleReverse16", _xtest.ExampleReverse16, "0000000000010011\n1100100000000000\n", false},

	{"ExampleReverse32", _xtest.ExampleReverse32, "00000000000000000000000000010011\n11001000000000000000000000000000\n", false},

	{"ExampleReverse64", _xtest.ExampleReverse64, "0000000000000000000000000000000000000000000000000000000000010011\n1100100000000000000000000000000000000000000000000000000000000000\n", false},

	{"ExampleReverseBytes16", _xtest.ExampleReverseBytes16, "0000000000001111\n0000111100000000\n", false},

	{"ExampleReverseBytes32", _xtest.ExampleReverseBytes32, "00000000000000000000000000001111\n00001111000000000000000000000000\n", false},

	{"ExampleReverseBytes64", _xtest.ExampleReverseBytes64, "0000000000000000000000000000000000000000000000000000000000001111\n0000111100000000000000000000000000000000000000000000000000000000\n", false},

	{"ExampleLen8", _xtest.ExampleLen8, "Len8(00001000) = 4\n", false},

	{"ExampleLen16", _xtest.ExampleLen16, "Len16(0000000000001000) = 4\n", false},

	{"ExampleLen32", _xtest.ExampleLen32, "Len32(00000000000000000000000000001000) = 4\n", false},

	{"ExampleLen64", _xtest.ExampleLen64, "Len64(0000000000000000000000000000000000000000000000000000000000001000) = 4\n", false},

}

func init() {

	testdeps.ImportPath = "math/bits"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

