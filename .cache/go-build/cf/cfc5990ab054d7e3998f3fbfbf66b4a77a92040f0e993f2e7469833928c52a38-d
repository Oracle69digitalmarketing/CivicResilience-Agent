
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"reflect"

	"testing"
	"testing/internal/testdeps"



	_test "go/types"


	_xtest "go/types_test"

)

var tests = []testing.InternalTest{

	{"TestContextHashCollisions", _test.TestContextHashCollisions},

	{"TestError", _test.TestError},

	{"TestStripAnnotations", _test.TestStripAnnotations},

	{"TestSizeof", _test.TestSizeof},

	{"TestTermlistAll", _test.TestTermlistAll},

	{"TestTermlistString", _test.TestTermlistString},

	{"TestTermlistIsEmpty", _test.TestTermlistIsEmpty},

	{"TestTermlistIsAll", _test.TestTermlistIsAll},

	{"TestTermlistNorm", _test.TestTermlistNorm},

	{"TestTermlistUnion", _test.TestTermlistUnion},

	{"TestTermlistIntersect", _test.TestTermlistIntersect},

	{"TestTermlistEqual", _test.TestTermlistEqual},

	{"TestTermlistIncludes", _test.TestTermlistIncludes},

	{"TestTermlistSupersetOf", _test.TestTermlistSupersetOf},

	{"TestTermlistSubsetOf", _test.TestTermlistSubsetOf},

	{"TestZeroTok", _test.TestZeroTok},

	{"TestAssignOp", _test.TestAssignOp},

	{"TestInvalidTypeSet", _test.TestInvalidTypeSet},

	{"TestTypeSetString", _test.TestTypeSetString},

	{"TestTermString", _test.TestTermString},

	{"TestTermEqual", _test.TestTermEqual},

	{"TestTermUnion", _test.TestTermUnion},

	{"TestTermIntersection", _test.TestTermIntersection},

	{"TestTermIncludes", _test.TestTermIncludes},

	{"TestTermSubsetOf", _test.TestTermSubsetOf},

	{"TestTermDisjoint", _test.TestTermDisjoint},

	{"TestValuesInfo", _xtest.TestValuesInfo},

	{"TestTypesInfo", _xtest.TestTypesInfo},

	{"TestInstanceInfo", _xtest.TestInstanceInfo},

	{"TestDefsInfo", _xtest.TestDefsInfo},

	{"TestUsesInfo", _xtest.TestUsesInfo},

	{"TestGenericMethodInfo", _xtest.TestGenericMethodInfo},

	{"TestImplicitsInfo", _xtest.TestImplicitsInfo},

	{"TestPkgNameOf", _xtest.TestPkgNameOf},

	{"TestPredicatesInfo", _xtest.TestPredicatesInfo},

	{"TestScopesInfo", _xtest.TestScopesInfo},

	{"TestInitOrderInfo", _xtest.TestInitOrderInfo},

	{"TestMultiFileInitOrder", _xtest.TestMultiFileInitOrder},

	{"TestFiles", _xtest.TestFiles},

	{"TestSelection", _xtest.TestSelection},

	{"TestIssue8518", _xtest.TestIssue8518},

	{"TestIssue59603", _xtest.TestIssue59603},

	{"TestLookupFieldOrMethodOnNil", _xtest.TestLookupFieldOrMethodOnNil},

	{"TestLookupFieldOrMethod", _xtest.TestLookupFieldOrMethod},

	{"TestLookupFieldOrMethod_RecursiveGeneric", _xtest.TestLookupFieldOrMethod_RecursiveGeneric},

	{"TestConvertibleTo", _xtest.TestConvertibleTo},

	{"TestAssignableTo", _xtest.TestAssignableTo},

	{"TestIdentical", _xtest.TestIdentical},

	{"TestIdentical_issue15173", _xtest.TestIdentical_issue15173},

	{"TestIdenticalUnions", _xtest.TestIdenticalUnions},

	{"TestIssue61737", _xtest.TestIssue61737},

	{"TestNewAlias_Issue65455", _xtest.TestNewAlias_Issue65455},

	{"TestIssue15305", _xtest.TestIssue15305},

	{"TestCompositeLitTypes", _xtest.TestCompositeLitTypes},

	{"TestObjectParents", _xtest.TestObjectParents},

	{"TestFailedImport", _xtest.TestFailedImport},

	{"TestInstantiate", _xtest.TestInstantiate},

	{"TestInstantiateConcurrent", _xtest.TestInstantiateConcurrent},

	{"TestInstantiateErrors", _xtest.TestInstantiateErrors},

	{"TestArgumentErrorUnwrapping", _xtest.TestArgumentErrorUnwrapping},

	{"TestInstanceIdentity", _xtest.TestInstanceIdentity},

	{"TestInstantiatedObjects", _xtest.TestInstantiatedObjects},

	{"TestImplements", _xtest.TestImplements},

	{"TestMissingMethodAlternative", _xtest.TestMissingMethodAlternative},

	{"TestErrorURL", _xtest.TestErrorURL},

	{"TestModuleVersion", _xtest.TestModuleVersion},

	{"TestFileVersions", _xtest.TestFileVersions},

	{"TestTooNew", _xtest.TestTooNew},

	{"TestUnaliasTooSoonInCycle", _xtest.TestUnaliasTooSoonInCycle},

	{"TestAlias_Rhs", _xtest.TestAlias_Rhs},

	{"TestAnyHijacking_Check", _xtest.TestAnyHijacking_Check},

	{"TestAnyHijacking_Lookup", _xtest.TestAnyHijacking_Lookup},

	{"TestVersionIssue69477", _xtest.TestVersionIssue69477},

	{"TestVersionWithoutPos", _xtest.TestVersionWithoutPos},

	{"TestVarKind", _xtest.TestVarKind},

	{"TestIssue73871", _xtest.TestIssue73871},

	{"TestBuiltinSignatures", _xtest.TestBuiltinSignatures},

	{"TestManual", _xtest.TestManual},

	{"TestLongConstants", _xtest.TestLongConstants},

	{"TestIndexRepresentability", _xtest.TestIndexRepresentability},

	{"TestIssue47243_TypedRHS", _xtest.TestIssue47243_TypedRHS},

	{"TestCheck", _xtest.TestCheck},

	{"TestSpec", _xtest.TestSpec},

	{"TestExamples", _xtest.TestExamples},

	{"TestFixedbugs", _xtest.TestFixedbugs},

	{"TestLocal", _xtest.TestLocal},

	{"TestCommentMap", _xtest.TestCommentMap},

	{"TestErrorCalls", _xtest.TestErrorCalls},

	{"TestEvalBasic", _xtest.TestEvalBasic},

	{"TestEvalComposite", _xtest.TestEvalComposite},

	{"TestEvalArith", _xtest.TestEvalArith},

	{"TestEvalPos", _xtest.TestEvalPos},

	{"TestCheckExpr", _xtest.TestCheckExpr},

	{"TestIssue65898", _xtest.TestIssue65898},

	{"TestExprString", _xtest.TestExprString},

	{"TestGenerate", _xtest.TestGenerate},

	{"TestHilbert", _xtest.TestHilbert},

	{"TestInstantiateEquality", _xtest.TestInstantiateEquality},

	{"TestInstantiateNonEquality", _xtest.TestInstantiateNonEquality},

	{"TestMethodInstantiation", _xtest.TestMethodInstantiation},

	{"TestImmutableSignatures", _xtest.TestImmutableSignatures},

	{"TestIssue5770", _xtest.TestIssue5770},

	{"TestIssue5849", _xtest.TestIssue5849},

	{"TestIssue6413", _xtest.TestIssue6413},

	{"TestIssue7245", _xtest.TestIssue7245},

	{"TestIssue7827", _xtest.TestIssue7827},

	{"TestIssue13898", _xtest.TestIssue13898},

	{"TestIssue22525", _xtest.TestIssue22525},

	{"TestIssue25627", _xtest.TestIssue25627},

	{"TestIssue28005", _xtest.TestIssue28005},

	{"TestIssue28282", _xtest.TestIssue28282},

	{"TestIssue29029", _xtest.TestIssue29029},

	{"TestIssue34151", _xtest.TestIssue34151},

	{"TestIssue34921", _xtest.TestIssue34921},

	{"TestIssue43088", _xtest.TestIssue43088},

	{"TestIssue44515", _xtest.TestIssue44515},

	{"TestIssue43124", _xtest.TestIssue43124},

	{"TestIssue50646", _xtest.TestIssue50646},

	{"TestIssue55030", _xtest.TestIssue55030},

	{"TestIssue51093", _xtest.TestIssue51093},

	{"TestIssue54258", _xtest.TestIssue54258},

	{"TestIssue59944", _xtest.TestIssue59944},

	{"TestIssue61931", _xtest.TestIssue61931},

	{"TestIssue61938", _xtest.TestIssue61938},

	{"TestIssue63260", _xtest.TestIssue63260},

	{"TestIssue44410", _xtest.TestIssue44410},

	{"TestIssue59831", _xtest.TestIssue59831},

	{"TestIssue64759", _xtest.TestIssue64759},

	{"TestIssue68334", _xtest.TestIssue68334},

	{"TestIssue68877", _xtest.TestIssue68877},

	{"TestIssue69092", _xtest.TestIssue69092},

	{"TestNewMethodSet", _xtest.TestNewMethodSet},

	{"TestNewMethodSet_RecursiveGeneric", _xtest.TestNewMethodSet_RecursiveGeneric},

	{"TestIssue60634", _xtest.TestIssue60634},

	{"TestMonoGood", _xtest.TestMonoGood},

	{"TestMonoBad", _xtest.TestMonoBad},

	{"TestFiniteTypeExpansion", _xtest.TestFiniteTypeExpansion},

	{"TestMethodOrdering", _xtest.TestMethodOrdering},

	{"TestIsAlias", _xtest.TestIsAlias},

	{"TestEmbeddedMethod", _xtest.TestEmbeddedMethod},

	{"TestObjectString", _xtest.TestObjectString},

	{"TestResolveIdents", _xtest.TestResolveIdents},

	{"TestScopeLookupParent", _xtest.TestScopeLookupParent},

	{"TestSelf", _xtest.TestSelf},

	{"TestMultipleSizeUse", _xtest.TestMultipleSizeUse},

	{"TestAlignofNaclSlice", _xtest.TestAlignofNaclSlice},

	{"TestIssue16902", _xtest.TestIssue16902},

	{"TestAtomicAlign", _xtest.TestAtomicAlign},

	{"TestGCSizes", _xtest.TestGCSizes},

	{"TestStdlib", _xtest.TestStdlib},

	{"TestStdTest", _xtest.TestStdTest},

	{"TestStdFixed", _xtest.TestStdFixed},

	{"TestStdKen", _xtest.TestStdKen},

	{"TestTypeString", _xtest.TestTypeString},

	{"TestQualifiedTypeString", _xtest.TestQualifiedTypeString},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkLookupFieldOrMethod", _xtest.BenchmarkLookupFieldOrMethod},

	{"BenchmarkNamed", _xtest.BenchmarkNamed},

	{"BenchmarkCheck", _xtest.BenchmarkCheck},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleScope", _xtest.ExampleScope, "package \"temperature\" scope {\n.  const temperature.Boiling temperature.Celsius\n.  type temperature.Celsius float64\n.  func temperature.FToC(f float64) temperature.Celsius\n.  func temperature.Unused()\n.  func temperature.main()\n.  main scope {\n.  .  package fmt\n.  .  function scope {\n.  .  .  var freezing temperature.Celsius\n.  .  }\n.  }\n.  main scope {\n.  .  package fmt\n.  .  function scope {\n.  .  .  var c temperature.Celsius\n.  .  }\n.  .  function scope {\n.  .  .  var f float64\n.  .  }\n.  .  function scope {\n.  .  .  block scope {\n.  .  .  }\n.  .  .  block scope {\n.  .  .  .  block scope {\n.  .  .  .  .  var x int\n.  .  .  .  }\n.  .  .  }\n.  .  }\n.  }\n}\n", false},

	{"ExampleMethodSet", _xtest.ExampleMethodSet, "Method set of temperature.Celsius:\nmethod (temperature.Celsius) String() string\n\nMethod set of *temperature.Celsius:\nmethod (*temperature.Celsius) SetF(f float64)\nmethod (*temperature.Celsius) String() string\n\nMethod set of temperature.S:\nMethodSet {}\n", false},

	{"ExampleInfo", _xtest.ExampleInfo, "InitOrder: [c = \"hello\" b = S(c) a = len(b)]\n\nDefs and Uses of each named object:\nbuiltin len:\n  defined at -\n  used at 6:15\nfunc fib(x int) int:\n  defined at fib:8:6\n  used at 12:20, 12:9\ntype S string:\n  defined at fib:4:6\n  used at 6:23\ntype int:\n  defined at -\n  used at 8:12, 8:17\ntype string:\n  defined at -\n  used at 4:8\nvar b S:\n  defined at fib:6:8\n  used at 6:19\nvar c string:\n  defined at fib:6:11\n  used at 6:25\nvar x int:\n  defined at fib:8:10\n  used at 10:10, 12:13, 12:24, 9:5\n\nTypes and Values of each expression:\n 4: 8 | string              | type    : string\n 6:15 | len                 | builtin : func(fib.S) int\n 6:15 | len(b)              | value   : int\n 6:19 | b                   | var     : fib.S\n 6:23 | S                   | type    : fib.S\n 6:23 | S(c)                | value   : fib.S\n 6:25 | c                   | var     : string\n 6:29 | \"hello\"             | value   : string = \"hello\"\n 8:12 | int                 | type    : int\n 8:17 | int                 | type    : int\n 9: 5 | x                   | var     : int\n 9: 5 | x < 2               | value   : untyped bool\n 9: 9 | 2                   | value   : int = 2\n10:10 | x                   | var     : int\n12: 9 | fib                 | value   : func(x int) int\n12: 9 | fib(x - 1)          | value   : int\n12: 9 | fib(x-1) - fib(x-2) | value   : int\n12:13 | x                   | var     : int\n12:13 | x - 1               | value   : int\n12:15 | 1                   | value   : int = 1\n12:20 | fib                 | value   : func(x int) int\n12:20 | fib(x - 2)          | value   : int\n12:24 | x                   | var     : int\n12:24 | x - 2               | value   : int\n12:26 | 2                   | value   : int = 2\n", false},

}

func init() {

	testdeps.ImportPath = "go/types"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	_xtest.TestMain(m)
	os.Exit(int(reflect.ValueOf(m).Elem().FieldByName("exitCode").Int()))

}

