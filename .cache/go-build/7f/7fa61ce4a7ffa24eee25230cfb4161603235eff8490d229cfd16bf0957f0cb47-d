
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "bytes"


	_xtest "bytes_test"

)

var tests = []testing.InternalTest{

	{"TestEqualNearPageBoundary", _xtest.TestEqualNearPageBoundary},

	{"TestIndexByteNearPageBoundary", _xtest.TestIndexByteNearPageBoundary},

	{"TestIndexNearPageBoundary", _xtest.TestIndexNearPageBoundary},

	{"TestCountNearPageBoundary", _xtest.TestCountNearPageBoundary},

	{"TestNewBuffer", _xtest.TestNewBuffer},

	{"TestNewBufferShallow", _xtest.TestNewBufferShallow},

	{"TestNewBufferString", _xtest.TestNewBufferString},

	{"TestBasicOperations", _xtest.TestBasicOperations},

	{"TestLargeStringWrites", _xtest.TestLargeStringWrites},

	{"TestLargeByteWrites", _xtest.TestLargeByteWrites},

	{"TestLargeStringReads", _xtest.TestLargeStringReads},

	{"TestLargeByteReads", _xtest.TestLargeByteReads},

	{"TestMixedReadsAndWrites", _xtest.TestMixedReadsAndWrites},

	{"TestCapWithPreallocatedSlice", _xtest.TestCapWithPreallocatedSlice},

	{"TestCapWithSliceAndWrittenData", _xtest.TestCapWithSliceAndWrittenData},

	{"TestNil", _xtest.TestNil},

	{"TestReadFrom", _xtest.TestReadFrom},

	{"TestReadFromPanicReader", _xtest.TestReadFromPanicReader},

	{"TestReadFromNegativeReader", _xtest.TestReadFromNegativeReader},

	{"TestWriteTo", _xtest.TestWriteTo},

	{"TestWriteAppend", _xtest.TestWriteAppend},

	{"TestRuneIO", _xtest.TestRuneIO},

	{"TestWriteInvalidRune", _xtest.TestWriteInvalidRune},

	{"TestNext", _xtest.TestNext},

	{"TestReadBytes", _xtest.TestReadBytes},

	{"TestReadString", _xtest.TestReadString},

	{"TestGrow", _xtest.TestGrow},

	{"TestGrowOverflow", _xtest.TestGrowOverflow},

	{"TestReadEmptyAtEOF", _xtest.TestReadEmptyAtEOF},

	{"TestUnreadByte", _xtest.TestUnreadByte},

	{"TestBufferGrowth", _xtest.TestBufferGrowth},

	{"TestLines", _xtest.TestLines},

	{"TestEqual", _xtest.TestEqual},

	{"TestEqualExhaustive", _xtest.TestEqualExhaustive},

	{"TestNotEqual", _xtest.TestNotEqual},

	{"TestIndex", _xtest.TestIndex},

	{"TestLastIndex", _xtest.TestLastIndex},

	{"TestIndexAny", _xtest.TestIndexAny},

	{"TestLastIndexAny", _xtest.TestLastIndexAny},

	{"TestIndexByte", _xtest.TestIndexByte},

	{"TestLastIndexByte", _xtest.TestLastIndexByte},

	{"TestIndexByteBig", _xtest.TestIndexByteBig},

	{"TestIndexByteSmall", _xtest.TestIndexByteSmall},

	{"TestIndexRune", _xtest.TestIndexRune},

	{"TestCountByte", _xtest.TestCountByte},

	{"TestCountByteNoMatch", _xtest.TestCountByteNoMatch},

	{"TestSplit", _xtest.TestSplit},

	{"TestSplitAfter", _xtest.TestSplitAfter},

	{"TestFields", _xtest.TestFields},

	{"TestFieldsFunc", _xtest.TestFieldsFunc},

	{"TestMap", _xtest.TestMap},

	{"TestToUpper", _xtest.TestToUpper},

	{"TestToLower", _xtest.TestToLower},

	{"TestToValidUTF8", _xtest.TestToValidUTF8},

	{"TestTrimSpace", _xtest.TestTrimSpace},

	{"TestRepeat", _xtest.TestRepeat},

	{"TestRepeatCatchesOverflow", _xtest.TestRepeatCatchesOverflow},

	{"TestRunes", _xtest.TestRunes},

	{"TestTrim", _xtest.TestTrim},

	{"TestTrimFunc", _xtest.TestTrimFunc},

	{"TestIndexFunc", _xtest.TestIndexFunc},

	{"TestReplace", _xtest.TestReplace},

	{"TestTitle", _xtest.TestTitle},

	{"TestToTitle", _xtest.TestToTitle},

	{"TestEqualFold", _xtest.TestEqualFold},

	{"TestCut", _xtest.TestCut},

	{"TestCutPrefix", _xtest.TestCutPrefix},

	{"TestCutSuffix", _xtest.TestCutSuffix},

	{"TestBufferGrowNegative", _xtest.TestBufferGrowNegative},

	{"TestBufferTruncateNegative", _xtest.TestBufferTruncateNegative},

	{"TestBufferTruncateOutOfRange", _xtest.TestBufferTruncateOutOfRange},

	{"TestContains", _xtest.TestContains},

	{"TestContainsAny", _xtest.TestContainsAny},

	{"TestContainsRune", _xtest.TestContainsRune},

	{"TestContainsFunc", _xtest.TestContainsFunc},

	{"TestClone", _xtest.TestClone},

	{"TestCompare", _xtest.TestCompare},

	{"TestCompareIdenticalSlice", _xtest.TestCompareIdenticalSlice},

	{"TestCompareBytes", _xtest.TestCompareBytes},

	{"TestEndianBaseCompare", _xtest.TestEndianBaseCompare},

	{"TestReader", _xtest.TestReader},

	{"TestReadAfterBigSeek", _xtest.TestReadAfterBigSeek},

	{"TestReaderAt", _xtest.TestReaderAt},

	{"TestReaderAtConcurrent", _xtest.TestReaderAtConcurrent},

	{"TestEmptyReaderConcurrent", _xtest.TestEmptyReaderConcurrent},

	{"TestReaderWriteTo", _xtest.TestReaderWriteTo},

	{"TestReaderLen", _xtest.TestReaderLen},

	{"TestUnreadRuneError", _xtest.TestUnreadRuneError},

	{"TestReaderDoubleUnreadRune", _xtest.TestReaderDoubleUnreadRune},

	{"TestReaderCopyNothing", _xtest.TestReaderCopyNothing},

	{"TestReaderLenSize", _xtest.TestReaderLenSize},

	{"TestReaderReset", _xtest.TestReaderReset},

	{"TestReaderZero", _xtest.TestReaderZero},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkReadString", _xtest.BenchmarkReadString},

	{"BenchmarkWriteByte", _xtest.BenchmarkWriteByte},

	{"BenchmarkWriteRune", _xtest.BenchmarkWriteRune},

	{"BenchmarkBufferNotEmptyWriteRead", _xtest.BenchmarkBufferNotEmptyWriteRead},

	{"BenchmarkBufferFullSmallReads", _xtest.BenchmarkBufferFullSmallReads},

	{"BenchmarkBufferWriteBlock", _xtest.BenchmarkBufferWriteBlock},

	{"BenchmarkBufferAppendNoCopy", _xtest.BenchmarkBufferAppendNoCopy},

	{"BenchmarkIndexByte", _xtest.BenchmarkIndexByte},

	{"BenchmarkIndexBytePortable", _xtest.BenchmarkIndexBytePortable},

	{"BenchmarkIndexRune", _xtest.BenchmarkIndexRune},

	{"BenchmarkIndexRuneASCII", _xtest.BenchmarkIndexRuneASCII},

	{"BenchmarkIndexRuneUnicode", _xtest.BenchmarkIndexRuneUnicode},

	{"BenchmarkEqual", _xtest.BenchmarkEqual},

	{"BenchmarkEqualBothUnaligned", _xtest.BenchmarkEqualBothUnaligned},

	{"BenchmarkIndex", _xtest.BenchmarkIndex},

	{"BenchmarkIndexEasy", _xtest.BenchmarkIndexEasy},

	{"BenchmarkCount", _xtest.BenchmarkCount},

	{"BenchmarkCountEasy", _xtest.BenchmarkCountEasy},

	{"BenchmarkCountSingle", _xtest.BenchmarkCountSingle},

	{"BenchmarkToUpper", _xtest.BenchmarkToUpper},

	{"BenchmarkToLower", _xtest.BenchmarkToLower},

	{"BenchmarkReplace", _xtest.BenchmarkReplace},

	{"BenchmarkFields", _xtest.BenchmarkFields},

	{"BenchmarkFieldsFunc", _xtest.BenchmarkFieldsFunc},

	{"BenchmarkTrimSpace", _xtest.BenchmarkTrimSpace},

	{"BenchmarkToValidUTF8", _xtest.BenchmarkToValidUTF8},

	{"BenchmarkIndexHard1", _xtest.BenchmarkIndexHard1},

	{"BenchmarkIndexHard2", _xtest.BenchmarkIndexHard2},

	{"BenchmarkIndexHard3", _xtest.BenchmarkIndexHard3},

	{"BenchmarkIndexHard4", _xtest.BenchmarkIndexHard4},

	{"BenchmarkLastIndexHard1", _xtest.BenchmarkLastIndexHard1},

	{"BenchmarkLastIndexHard2", _xtest.BenchmarkLastIndexHard2},

	{"BenchmarkLastIndexHard3", _xtest.BenchmarkLastIndexHard3},

	{"BenchmarkCountHard1", _xtest.BenchmarkCountHard1},

	{"BenchmarkCountHard2", _xtest.BenchmarkCountHard2},

	{"BenchmarkCountHard3", _xtest.BenchmarkCountHard3},

	{"BenchmarkSplitEmptySeparator", _xtest.BenchmarkSplitEmptySeparator},

	{"BenchmarkSplitSingleByteSeparator", _xtest.BenchmarkSplitSingleByteSeparator},

	{"BenchmarkSplitMultiByteSeparator", _xtest.BenchmarkSplitMultiByteSeparator},

	{"BenchmarkSplitNSingleByteSeparator", _xtest.BenchmarkSplitNSingleByteSeparator},

	{"BenchmarkSplitNMultiByteSeparator", _xtest.BenchmarkSplitNMultiByteSeparator},

	{"BenchmarkRepeat", _xtest.BenchmarkRepeat},

	{"BenchmarkRepeatLarge", _xtest.BenchmarkRepeatLarge},

	{"BenchmarkBytesCompare", _xtest.BenchmarkBytesCompare},

	{"BenchmarkIndexAnyASCII", _xtest.BenchmarkIndexAnyASCII},

	{"BenchmarkIndexAnyUTF8", _xtest.BenchmarkIndexAnyUTF8},

	{"BenchmarkLastIndexAnyASCII", _xtest.BenchmarkLastIndexAnyASCII},

	{"BenchmarkLastIndexAnyUTF8", _xtest.BenchmarkLastIndexAnyUTF8},

	{"BenchmarkTrimASCII", _xtest.BenchmarkTrimASCII},

	{"BenchmarkTrimByte", _xtest.BenchmarkTrimByte},

	{"BenchmarkIndexPeriodic", _xtest.BenchmarkIndexPeriodic},

	{"BenchmarkCompareBytesEqual", _xtest.BenchmarkCompareBytesEqual},

	{"BenchmarkCompareBytesToNil", _xtest.BenchmarkCompareBytesToNil},

	{"BenchmarkCompareBytesEmpty", _xtest.BenchmarkCompareBytesEmpty},

	{"BenchmarkCompareBytesIdentical", _xtest.BenchmarkCompareBytesIdentical},

	{"BenchmarkCompareBytesSameLength", _xtest.BenchmarkCompareBytesSameLength},

	{"BenchmarkCompareBytesDifferentLength", _xtest.BenchmarkCompareBytesDifferentLength},

	{"BenchmarkCompareBytesBigUnaligned", _xtest.BenchmarkCompareBytesBigUnaligned},

	{"BenchmarkCompareBytesBigBothUnaligned", _xtest.BenchmarkCompareBytesBigBothUnaligned},

	{"BenchmarkCompareBytesBig", _xtest.BenchmarkCompareBytesBig},

	{"BenchmarkCompareBytesBigIdentical", _xtest.BenchmarkCompareBytesBigIdentical},

	{"BenchmarkSplitSeqEmptySeparator", _xtest.BenchmarkSplitSeqEmptySeparator},

	{"BenchmarkSplitSeqSingleByteSeparator", _xtest.BenchmarkSplitSeqSingleByteSeparator},

	{"BenchmarkSplitSeqMultiByteSeparator", _xtest.BenchmarkSplitSeqMultiByteSeparator},

	{"BenchmarkSplitAfterSeqEmptySeparator", _xtest.BenchmarkSplitAfterSeqEmptySeparator},

	{"BenchmarkSplitAfterSeqSingleByteSeparator", _xtest.BenchmarkSplitAfterSeqSingleByteSeparator},

	{"BenchmarkSplitAfterSeqMultiByteSeparator", _xtest.BenchmarkSplitAfterSeqMultiByteSeparator},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzReplace", _xtest.FuzzReplace},

}

var examples = []testing.InternalExample{

	{"ExampleBuffer", _xtest.ExampleBuffer, "Hello world!\n", false},

	{"ExampleBuffer_reader", _xtest.ExampleBuffer_reader, "Gophers rule!\n", false},

	{"ExampleBuffer_Bytes", _xtest.ExampleBuffer_Bytes, "hello world\n", false},

	{"ExampleBuffer_AvailableBuffer", _xtest.ExampleBuffer_AvailableBuffer, "0 1 2 3\n", false},

	{"ExampleBuffer_Cap", _xtest.ExampleBuffer_Cap, "10\n10\n", false},

	{"ExampleBuffer_Grow", _xtest.ExampleBuffer_Grow, "\"64 bytes or fewer\"\n", false},

	{"ExampleBuffer_Len", _xtest.ExampleBuffer_Len, "5\n", false},

	{"ExampleBuffer_Next", _xtest.ExampleBuffer_Next, "ab\ncd\ne\n", false},

	{"ExampleBuffer_Read", _xtest.ExampleBuffer_Read, "1\nbcde\na\n", false},

	{"ExampleBuffer_ReadByte", _xtest.ExampleBuffer_ReadByte, "97\nbcde\n", false},

	{"ExampleClone", _xtest.ExampleClone, "abc\nabc\ndbc\n", false},

	{"ExampleContains", _xtest.ExampleContains, "true\nfalse\ntrue\ntrue\n", false},

	{"ExampleContainsAny", _xtest.ExampleContainsAny, "true\ntrue\nfalse\nfalse\n", false},

	{"ExampleContainsRune", _xtest.ExampleContainsRune, "true\nfalse\ntrue\ntrue\nfalse\n", false},

	{"ExampleContainsFunc", _xtest.ExampleContainsFunc, "false\ntrue\n", false},

	{"ExampleCount", _xtest.ExampleCount, "3\n5\n", false},

	{"ExampleCut", _xtest.ExampleCut, "Cut(\"Gopher\", \"Go\") = \"\", \"pher\", true\nCut(\"Gopher\", \"ph\") = \"Go\", \"er\", true\nCut(\"Gopher\", \"er\") = \"Goph\", \"\", true\nCut(\"Gopher\", \"Badger\") = \"Gopher\", \"\", false\n", false},

	{"ExampleCutPrefix", _xtest.ExampleCutPrefix, "CutPrefix(\"Gopher\", \"Go\") = \"pher\", true\nCutPrefix(\"Gopher\", \"ph\") = \"Gopher\", false\n", false},

	{"ExampleCutSuffix", _xtest.ExampleCutSuffix, "CutSuffix(\"Gopher\", \"Go\") = \"Gopher\", false\nCutSuffix(\"Gopher\", \"er\") = \"Goph\", true\n", false},

	{"ExampleEqual", _xtest.ExampleEqual, "true\nfalse\n", false},

	{"ExampleEqualFold", _xtest.ExampleEqualFold, "true\n", false},

	{"ExampleFields", _xtest.ExampleFields, "Fields are: [\"foo\" \"bar\" \"baz\"]\n", false},

	{"ExampleFieldsFunc", _xtest.ExampleFieldsFunc, "Fields are: [\"foo1\" \"bar2\" \"baz3\"]\n", false},

	{"ExampleHasPrefix", _xtest.ExampleHasPrefix, "true\nfalse\ntrue\n", false},

	{"ExampleHasSuffix", _xtest.ExampleHasSuffix, "true\nfalse\nfalse\ntrue\n", false},

	{"ExampleIndex", _xtest.ExampleIndex, "4\n-1\n", false},

	{"ExampleIndexByte", _xtest.ExampleIndexByte, "4\n-1\n", false},

	{"ExampleIndexFunc", _xtest.ExampleIndexFunc, "7\n-1\n", false},

	{"ExampleIndexAny", _xtest.ExampleIndexAny, "2\n-1\n", false},

	{"ExampleIndexRune", _xtest.ExampleIndexRune, "4\n-1\n", false},

	{"ExampleJoin", _xtest.ExampleJoin, "foo, bar, baz\n", false},

	{"ExampleLastIndex", _xtest.ExampleLastIndex, "0\n3\n-1\n", false},

	{"ExampleLastIndexAny", _xtest.ExampleLastIndexAny, "5\n3\n-1\n", false},

	{"ExampleLastIndexByte", _xtest.ExampleLastIndexByte, "3\n8\n-1\n", false},

	{"ExampleLastIndexFunc", _xtest.ExampleLastIndexFunc, "8\n9\n-1\n", false},

	{"ExampleMap", _xtest.ExampleMap, "'Gjnf oevyyvt naq gur fyvgul tbcure...\n", false},

	{"ExampleReader_Len", _xtest.ExampleReader_Len, "3\n16\n", false},

	{"ExampleRepeat", _xtest.ExampleRepeat, "banana\n", false},

	{"ExampleReplace", _xtest.ExampleReplace, "oinky oinky oink\nmoo moo moo\n", false},

	{"ExampleReplaceAll", _xtest.ExampleReplaceAll, "moo moo moo\n", false},

	{"ExampleRunes", _xtest.ExampleRunes, "U+0067 'g'\nU+006F 'o'\nU+0020 ' '\nU+0067 'g'\nU+006F 'o'\nU+0070 'p'\nU+0068 'h'\nU+0065 'e'\nU+0072 'r'\n", false},

	{"ExampleSplit", _xtest.ExampleSplit, "[\"a\" \"b\" \"c\"]\n[\"\" \"man \" \"plan \" \"canal panama\"]\n[\" \" \"x\" \"y\" \"z\" \" \"]\n[\"\"]\n", false},

	{"ExampleSplitN", _xtest.ExampleSplitN, "[\"a\" \"b,c\"]\n[] (nil = true)\n", false},

	{"ExampleSplitAfter", _xtest.ExampleSplitAfter, "[\"a,\" \"b,\" \"c\"]\n", false},

	{"ExampleSplitAfterN", _xtest.ExampleSplitAfterN, "[\"a,\" \"b,c\"]\n", false},

	{"ExampleTitle", _xtest.ExampleTitle, "Her Royal Highness\n", false},

	{"ExampleToTitle", _xtest.ExampleToTitle, "LOUD NOISES\nБРАТ\n", false},

	{"ExampleToTitleSpecial", _xtest.ExampleToTitleSpecial, "Original : ahoj vývojári golang\nToTitle : AHOJ VÝVOJÁRİ GOLANG\n", false},

	{"ExampleToValidUTF8", _xtest.ExampleToValidUTF8, "abc\nabc\nabc\n", false},

	{"ExampleTrim", _xtest.ExampleTrim, "[\"Achtung! Achtung\"]\n", false},

	{"ExampleTrimFunc", _xtest.ExampleTrimFunc, "-gopher!\n\"go-gopher!\"\ngo-gopher\ngo-gopher!\n", false},

	{"ExampleTrimLeft", _xtest.ExampleTrimLeft, "gopher8257\n", false},

	{"ExampleTrimLeftFunc", _xtest.ExampleTrimLeftFunc, "-gopher\ngo-gopher!\ngo-gopher!567\n", false},

	{"ExampleTrimPrefix", _xtest.ExampleTrimPrefix, "Hello, world!\n", false},

	{"ExampleTrimSpace", _xtest.ExampleTrimSpace, "a lone gopher\n", false},

	{"ExampleTrimSuffix", _xtest.ExampleTrimSuffix, "Hello, world!\n", false},

	{"ExampleTrimRight", _xtest.ExampleTrimRight, "453gopher\n", false},

	{"ExampleTrimRightFunc", _xtest.ExampleTrimRightFunc, "go-\ngo-gopher\n1234go-gopher!\n", false},

	{"ExampleToLower", _xtest.ExampleToLower, "gopher\n", false},

	{"ExampleToLowerSpecial", _xtest.ExampleToLowerSpecial, "Original : AHOJ VÝVOJÁRİ GOLANG\nToLower : ahoj vývojári golang\n", false},

	{"ExampleToUpper", _xtest.ExampleToUpper, "GOPHER\n", false},

	{"ExampleToUpperSpecial", _xtest.ExampleToUpperSpecial, "Original : ahoj vývojári golang\nToUpper : AHOJ VÝVOJÁRİ GOLANG\n", false},

	{"ExampleLines", _xtest.ExampleLines, "\"Hello\\n\"\n\"World\\n\"\n\"Go Programming\\n\"\n", false},

	{"ExampleSplitSeq", _xtest.ExampleSplitSeq, "\"a\"\n\"b\"\n\"c\"\n\"d\"\n", false},

	{"ExampleSplitAfterSeq", _xtest.ExampleSplitAfterSeq, "\"a,\"\n\"b,\"\n\"c,\"\n\"d\"\n", false},

	{"ExampleFieldsSeq", _xtest.ExampleFieldsSeq, "Split byte slice into fields:\n\"The\"\n\"quick\"\n\"brown\"\n\"fox\"\n\nSplit byte slice with multiple spaces:\n\"lots\"\n\"of\"\n\"spaces\"\n", false},

	{"ExampleFieldsFuncSeq", _xtest.ExampleFieldsFuncSeq, "Split on whitespace(similar to FieldsSeq):\n\"The\"\n\"quick\"\n\"brown\"\n\"fox\"\n\nSplit on digits:\n\"abc\"\n\"def\"\n\"ghi\"\n", false},

}

func init() {

	testdeps.ImportPath = "bytes"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

