
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "sync"


	_xtest "sync_test"

)

var tests = []testing.InternalTest{

	{"TestCondSignal", _xtest.TestCondSignal},

	{"TestCondSignalGenerations", _xtest.TestCondSignalGenerations},

	{"TestCondBroadcast", _xtest.TestCondBroadcast},

	{"TestRace", _xtest.TestRace},

	{"TestCondSignalStealing", _xtest.TestCondSignalStealing},

	{"TestCondCopy", _xtest.TestCondCopy},

	{"TestMapMatchesRWMutex", _xtest.TestMapMatchesRWMutex},

	{"TestMapMatchesDeepCopy", _xtest.TestMapMatchesDeepCopy},

	{"TestMapMatchesHashTrieMap", _xtest.TestMapMatchesHashTrieMap},

	{"TestConcurrentRange", _xtest.TestConcurrentRange},

	{"TestIssue40999", _xtest.TestIssue40999},

	{"TestMapRangeNestedCall", _xtest.TestMapRangeNestedCall},

	{"TestCompareAndSwap_NonExistingKey", _xtest.TestCompareAndSwap_NonExistingKey},

	{"TestMapRangeNoAllocations", _xtest.TestMapRangeNoAllocations},

	{"TestConcurrentClear", _xtest.TestConcurrentClear},

	{"TestMapClearOneAllocation", _xtest.TestMapClearOneAllocation},

	{"TestSemaphore", _xtest.TestSemaphore},

	{"TestMutex", _xtest.TestMutex},

	{"TestMutexMisuse", _xtest.TestMutexMisuse},

	{"TestMutexFairness", _xtest.TestMutexFairness},

	{"TestOnce", _xtest.TestOnce},

	{"TestOncePanic", _xtest.TestOncePanic},

	{"TestOnceFunc", _xtest.TestOnceFunc},

	{"TestOnceValue", _xtest.TestOnceValue},

	{"TestOnceValues", _xtest.TestOnceValues},

	{"TestOnceFuncPanic", _xtest.TestOnceFuncPanic},

	{"TestOnceValuePanic", _xtest.TestOnceValuePanic},

	{"TestOnceValuesPanic", _xtest.TestOnceValuesPanic},

	{"TestOnceFuncPanicNil", _xtest.TestOnceFuncPanicNil},

	{"TestOnceFuncGoexit", _xtest.TestOnceFuncGoexit},

	{"TestOnceFuncPanicTraceback", _xtest.TestOnceFuncPanicTraceback},

	{"TestOnceXGC", _xtest.TestOnceXGC},

	{"TestPool", _xtest.TestPool},

	{"TestPoolNew", _xtest.TestPoolNew},

	{"TestPoolGC", _xtest.TestPoolGC},

	{"TestPoolRelease", _xtest.TestPoolRelease},

	{"TestPoolStress", _xtest.TestPoolStress},

	{"TestPoolDequeue", _xtest.TestPoolDequeue},

	{"TestPoolChain", _xtest.TestPoolChain},

	{"TestNilPool", _xtest.TestNilPool},

	{"TestParallelReaders", _xtest.TestParallelReaders},

	{"TestRWMutex", _xtest.TestRWMutex},

	{"TestRLocker", _xtest.TestRLocker},

	{"TestWaitGroup", _xtest.TestWaitGroup},

	{"TestWaitGroupMisuse", _xtest.TestWaitGroupMisuse},

	{"TestWaitGroupRace", _xtest.TestWaitGroupRace},

	{"TestWaitGroupAlign", _xtest.TestWaitGroupAlign},

	{"TestWaitGroupGo", _xtest.TestWaitGroupGo},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkCond1", _xtest.BenchmarkCond1},

	{"BenchmarkCond2", _xtest.BenchmarkCond2},

	{"BenchmarkCond4", _xtest.BenchmarkCond4},

	{"BenchmarkCond8", _xtest.BenchmarkCond8},

	{"BenchmarkCond16", _xtest.BenchmarkCond16},

	{"BenchmarkCond32", _xtest.BenchmarkCond32},

	{"BenchmarkMapLoadMostlyHits", _xtest.BenchmarkMapLoadMostlyHits},

	{"BenchmarkMapLoadMostlyMisses", _xtest.BenchmarkMapLoadMostlyMisses},

	{"BenchmarkMapLoadOrStoreBalanced", _xtest.BenchmarkMapLoadOrStoreBalanced},

	{"BenchmarkMapLoadOrStoreUnique", _xtest.BenchmarkMapLoadOrStoreUnique},

	{"BenchmarkMapLoadOrStoreCollision", _xtest.BenchmarkMapLoadOrStoreCollision},

	{"BenchmarkMapLoadAndDeleteBalanced", _xtest.BenchmarkMapLoadAndDeleteBalanced},

	{"BenchmarkMapLoadAndDeleteUnique", _xtest.BenchmarkMapLoadAndDeleteUnique},

	{"BenchmarkMapLoadAndDeleteCollision", _xtest.BenchmarkMapLoadAndDeleteCollision},

	{"BenchmarkMapRange", _xtest.BenchmarkMapRange},

	{"BenchmarkMapAdversarialAlloc", _xtest.BenchmarkMapAdversarialAlloc},

	{"BenchmarkMapAdversarialDelete", _xtest.BenchmarkMapAdversarialDelete},

	{"BenchmarkMapDeleteCollision", _xtest.BenchmarkMapDeleteCollision},

	{"BenchmarkMapSwapCollision", _xtest.BenchmarkMapSwapCollision},

	{"BenchmarkMapSwapMostlyHits", _xtest.BenchmarkMapSwapMostlyHits},

	{"BenchmarkMapSwapMostlyMisses", _xtest.BenchmarkMapSwapMostlyMisses},

	{"BenchmarkMapCompareAndSwapCollision", _xtest.BenchmarkMapCompareAndSwapCollision},

	{"BenchmarkMapCompareAndSwapNoExistingKey", _xtest.BenchmarkMapCompareAndSwapNoExistingKey},

	{"BenchmarkMapCompareAndSwapValueNotEqual", _xtest.BenchmarkMapCompareAndSwapValueNotEqual},

	{"BenchmarkMapCompareAndSwapMostlyHits", _xtest.BenchmarkMapCompareAndSwapMostlyHits},

	{"BenchmarkMapCompareAndSwapMostlyMisses", _xtest.BenchmarkMapCompareAndSwapMostlyMisses},

	{"BenchmarkMapCompareAndDeleteCollision", _xtest.BenchmarkMapCompareAndDeleteCollision},

	{"BenchmarkMapCompareAndDeleteMostlyHits", _xtest.BenchmarkMapCompareAndDeleteMostlyHits},

	{"BenchmarkMapCompareAndDeleteMostlyMisses", _xtest.BenchmarkMapCompareAndDeleteMostlyMisses},

	{"BenchmarkMapClear", _xtest.BenchmarkMapClear},

	{"BenchmarkUncontendedSemaphore", _xtest.BenchmarkUncontendedSemaphore},

	{"BenchmarkContendedSemaphore", _xtest.BenchmarkContendedSemaphore},

	{"BenchmarkMutexUncontended", _xtest.BenchmarkMutexUncontended},

	{"BenchmarkMutex", _xtest.BenchmarkMutex},

	{"BenchmarkMutexSlack", _xtest.BenchmarkMutexSlack},

	{"BenchmarkMutexWork", _xtest.BenchmarkMutexWork},

	{"BenchmarkMutexWorkSlack", _xtest.BenchmarkMutexWorkSlack},

	{"BenchmarkMutexNoSpin", _xtest.BenchmarkMutexNoSpin},

	{"BenchmarkMutexSpin", _xtest.BenchmarkMutexSpin},

	{"BenchmarkOnce", _xtest.BenchmarkOnce},

	{"BenchmarkOnceFunc", _xtest.BenchmarkOnceFunc},

	{"BenchmarkOnceValue", _xtest.BenchmarkOnceValue},

	{"BenchmarkOnceValues", _xtest.BenchmarkOnceValues},

	{"BenchmarkPool", _xtest.BenchmarkPool},

	{"BenchmarkPoolOverflow", _xtest.BenchmarkPoolOverflow},

	{"BenchmarkPoolStarvation", _xtest.BenchmarkPoolStarvation},

	{"BenchmarkPoolSTW", _xtest.BenchmarkPoolSTW},

	{"BenchmarkPoolExpensiveNew", _xtest.BenchmarkPoolExpensiveNew},

	{"BenchmarkSemaUncontended", _xtest.BenchmarkSemaUncontended},

	{"BenchmarkSemaSyntNonblock", _xtest.BenchmarkSemaSyntNonblock},

	{"BenchmarkSemaSyntBlock", _xtest.BenchmarkSemaSyntBlock},

	{"BenchmarkSemaWorkNonblock", _xtest.BenchmarkSemaWorkNonblock},

	{"BenchmarkSemaWorkBlock", _xtest.BenchmarkSemaWorkBlock},

	{"BenchmarkRWMutexUncontended", _xtest.BenchmarkRWMutexUncontended},

	{"BenchmarkRWMutexWrite100", _xtest.BenchmarkRWMutexWrite100},

	{"BenchmarkRWMutexWrite10", _xtest.BenchmarkRWMutexWrite10},

	{"BenchmarkRWMutexWorkWrite100", _xtest.BenchmarkRWMutexWorkWrite100},

	{"BenchmarkRWMutexWorkWrite10", _xtest.BenchmarkRWMutexWorkWrite10},

	{"BenchmarkWaitGroupUncontended", _xtest.BenchmarkWaitGroupUncontended},

	{"BenchmarkWaitGroupAddDone", _xtest.BenchmarkWaitGroupAddDone},

	{"BenchmarkWaitGroupAddDoneWork", _xtest.BenchmarkWaitGroupAddDoneWork},

	{"BenchmarkWaitGroupWait", _xtest.BenchmarkWaitGroupWait},

	{"BenchmarkWaitGroupWaitWork", _xtest.BenchmarkWaitGroupWaitWork},

	{"BenchmarkWaitGroupActuallyWait", _xtest.BenchmarkWaitGroupActuallyWait},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExamplePool", _xtest.ExamplePool, "2006-01-02T15:04:05Z path=/search?q=flowers\n", false},

	{"ExampleOnce", _xtest.ExampleOnce, "Only once\n", false},

	{"ExampleOnceValue", _xtest.ExampleOnceValue, "Computed once: 499500\n", false},

	{"ExampleOnceValues", _xtest.ExampleOnceValues, "Reading file once\n", false},

}

func init() {

	testdeps.ImportPath = "sync"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

