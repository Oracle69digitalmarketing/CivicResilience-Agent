
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "net/netip"


	_xtest "net/netip_test"

)

var tests = []testing.InternalTest{

	{"TestInlining", _test.TestInlining},

	{"TestPrefixValid", _test.TestPrefixValid},

	{"TestIPNextPrev", _test.TestIPNextPrev},

	{"TestIPBitLen", _test.TestIPBitLen},

	{"TestPrefixContains", _test.TestPrefixContains},

	{"TestParseIPError", _test.TestParseIPError},

	{"TestParseAddrPort", _test.TestParseAddrPort},

	{"TestAddrPortMarshalUnmarshal", _test.TestAddrPortMarshalUnmarshal},

	{"TestIPv6Accessor", _test.TestIPv6Accessor},

	{"TestUint128AddSub", _test.TestUint128AddSub},

	{"TestBitsSetFrom", _test.TestBitsSetFrom},

	{"TestBitsClearedFrom", _test.TestBitsClearedFrom},

	{"TestParseAddr", _xtest.TestParseAddr},

	{"TestAddrFromSlice", _xtest.TestAddrFromSlice},

	{"TestIPv4Constructors", _xtest.TestIPv4Constructors},

	{"TestAddrAppendText", _xtest.TestAddrAppendText},

	{"TestAddrMarshalUnmarshalBinary", _xtest.TestAddrMarshalUnmarshalBinary},

	{"TestAddrPortMarshalTextString", _xtest.TestAddrPortMarshalTextString},

	{"TestAddrPortMarshalUnmarshalBinary", _xtest.TestAddrPortMarshalUnmarshalBinary},

	{"TestPrefixMarshalTextString", _xtest.TestPrefixMarshalTextString},

	{"TestPrefixMarshalUnmarshalBinary", _xtest.TestPrefixMarshalUnmarshalBinary},

	{"TestAddrMarshalUnmarshal", _xtest.TestAddrMarshalUnmarshal},

	{"TestAddrFrom16", _xtest.TestAddrFrom16},

	{"TestIPProperties", _xtest.TestIPProperties},

	{"TestAddrWellKnown", _xtest.TestAddrWellKnown},

	{"TestAddrLessCompare", _xtest.TestAddrLessCompare},

	{"TestAddrPortCompare", _xtest.TestAddrPortCompare},

	{"TestPrefixCompare", _xtest.TestPrefixCompare},

	{"TestIPStringExpanded", _xtest.TestIPStringExpanded},

	{"TestPrefixMasking", _xtest.TestPrefixMasking},

	{"TestPrefixMarshalUnmarshal", _xtest.TestPrefixMarshalUnmarshal},

	{"TestPrefixUnmarshalTextNonZero", _xtest.TestPrefixUnmarshalTextNonZero},

	{"TestIs4AndIs6", _xtest.TestIs4AndIs6},

	{"TestIs4In6", _xtest.TestIs4In6},

	{"TestPrefixMasked", _xtest.TestPrefixMasked},

	{"TestPrefix", _xtest.TestPrefix},

	{"TestPrefixFromInvalidBits", _xtest.TestPrefixFromInvalidBits},

	{"TestParsePrefixAllocs", _xtest.TestParsePrefixAllocs},

	{"TestParsePrefixError", _xtest.TestParsePrefixError},

	{"TestPrefixIsSingleIP", _xtest.TestPrefixIsSingleIP},

	{"TestAs4", _xtest.TestAs4},

	{"TestPrefixOverlaps", _xtest.TestPrefixOverlaps},

	{"TestNoAllocs", _xtest.TestNoAllocs},

	{"TestAddrStringAllocs", _xtest.TestAddrStringAllocs},

	{"TestPrefixString", _xtest.TestPrefixString},

	{"TestAddrPortString", _xtest.TestAddrPortString},

	{"TestAsSlice", _xtest.TestAsSlice},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkIPNextPrev", _test.BenchmarkIPNextPrev},

	{"BenchmarkBinaryMarshalRoundTrip", _xtest.BenchmarkBinaryMarshalRoundTrip},

	{"BenchmarkStdIPv4", _xtest.BenchmarkStdIPv4},

	{"BenchmarkIPv4", _xtest.BenchmarkIPv4},

	{"BenchmarkIPv4_inline", _xtest.BenchmarkIPv4_inline},

	{"BenchmarkStdIPv6", _xtest.BenchmarkStdIPv6},

	{"BenchmarkIPv6", _xtest.BenchmarkIPv6},

	{"BenchmarkIPv4Contains", _xtest.BenchmarkIPv4Contains},

	{"BenchmarkIPv6Contains", _xtest.BenchmarkIPv6Contains},

	{"BenchmarkParseAddr", _xtest.BenchmarkParseAddr},

	{"BenchmarkStdParseIP", _xtest.BenchmarkStdParseIP},

	{"BenchmarkAddrString", _xtest.BenchmarkAddrString},

	{"BenchmarkIPStringExpanded", _xtest.BenchmarkIPStringExpanded},

	{"BenchmarkAddrMarshalText", _xtest.BenchmarkAddrMarshalText},

	{"BenchmarkAddrPortString", _xtest.BenchmarkAddrPortString},

	{"BenchmarkAddrPortMarshalText", _xtest.BenchmarkAddrPortMarshalText},

	{"BenchmarkPrefixMasking", _xtest.BenchmarkPrefixMasking},

	{"BenchmarkPrefixMarshalText", _xtest.BenchmarkPrefixMarshalText},

	{"BenchmarkParseAddrPort", _xtest.BenchmarkParseAddrPort},

	{"BenchmarkAs16", _xtest.BenchmarkAs16},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzParse", _xtest.FuzzParse},

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "net/netip"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

