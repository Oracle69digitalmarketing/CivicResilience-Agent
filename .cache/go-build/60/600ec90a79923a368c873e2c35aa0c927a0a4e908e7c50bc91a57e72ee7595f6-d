
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "math/rand"


	_xtest "math/rand_test"

)

var tests = []testing.InternalTest{

	{"TestAuto", _xtest.TestAuto},

	{"TestDefaultRace", _xtest.TestDefaultRace},

	{"TestConcurrent", _xtest.TestConcurrent},

	{"TestStandardNormalValues", _xtest.TestStandardNormalValues},

	{"TestNonStandardNormalValues", _xtest.TestNonStandardNormalValues},

	{"TestStandardExponentialValues", _xtest.TestStandardExponentialValues},

	{"TestNonStandardExponentialValues", _xtest.TestNonStandardExponentialValues},

	{"TestNormTables", _xtest.TestNormTables},

	{"TestExpTables", _xtest.TestExpTables},

	{"TestFloat32", _xtest.TestFloat32},

	{"TestReadUniformity", _xtest.TestReadUniformity},

	{"TestReadEmpty", _xtest.TestReadEmpty},

	{"TestReadByOneByte", _xtest.TestReadByOneByte},

	{"TestReadSeedReset", _xtest.TestReadSeedReset},

	{"TestShuffleSmall", _xtest.TestShuffleSmall},

	{"TestUniformFactorial", _xtest.TestUniformFactorial},

	{"TestSeedNop", _xtest.TestSeedNop},

	{"TestRegress", _xtest.TestRegress},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkInt63Threadsafe", _xtest.BenchmarkInt63Threadsafe},

	{"BenchmarkInt63ThreadsafeParallel", _xtest.BenchmarkInt63ThreadsafeParallel},

	{"BenchmarkInt63Unthreadsafe", _xtest.BenchmarkInt63Unthreadsafe},

	{"BenchmarkIntn1000", _xtest.BenchmarkIntn1000},

	{"BenchmarkInt63n1000", _xtest.BenchmarkInt63n1000},

	{"BenchmarkInt31n1000", _xtest.BenchmarkInt31n1000},

	{"BenchmarkFloat32", _xtest.BenchmarkFloat32},

	{"BenchmarkFloat64", _xtest.BenchmarkFloat64},

	{"BenchmarkPerm3", _xtest.BenchmarkPerm3},

	{"BenchmarkPerm30", _xtest.BenchmarkPerm30},

	{"BenchmarkPerm30ViaShuffle", _xtest.BenchmarkPerm30ViaShuffle},

	{"BenchmarkShuffleOverhead", _xtest.BenchmarkShuffleOverhead},

	{"BenchmarkRead3", _xtest.BenchmarkRead3},

	{"BenchmarkRead64", _xtest.BenchmarkRead64},

	{"BenchmarkRead1000", _xtest.BenchmarkRead1000},

	{"BenchmarkConcurrent", _xtest.BenchmarkConcurrent},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"Example_rand", _xtest.Example_rand, "Float32     0.2635776           0.6358173           0.6718283\nFloat64     0.628605430454327   0.4504798828572669  0.9562755949377957\nExpFloat64  0.3362240648200941  1.4256072328483647  0.24354758816173044\nNormFloat64 0.17233959114940064 1.577014951434847   0.04259129641113857\nInt31       1501292890          1486668269          182840835\nInt63       3546343826724305832 5724354148158589552 5239846799706671610\nUint32      2760229429          296659907           1922395059\nIntn(10)    1                   2                   5\nInt31n(10)  4                   7                   8\nInt63n(10)  7                   6                   3\nPerm        [1 4 2 3 0]         [4 2 1 3 0]         [1 2 4 0 3]\n", false},

	{"ExamplePerm", _xtest.ExamplePerm, "1\n2\n0\n", true},

}

func init() {

	testdeps.ImportPath = "math/rand"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

