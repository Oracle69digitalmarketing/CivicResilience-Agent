
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_ "crypto/rsa"


	_xtest "crypto/rsa_test"

)

var tests = []testing.InternalTest{

	{"TestEqual", _xtest.TestEqual},

	{"TestDecryptPKCS1v15", _xtest.TestDecryptPKCS1v15},

	{"TestEncryptPKCS1v15", _xtest.TestEncryptPKCS1v15},

	{"TestEncryptPKCS1v15SessionKey", _xtest.TestEncryptPKCS1v15SessionKey},

	{"TestEncryptPKCS1v15DecrypterSessionKey", _xtest.TestEncryptPKCS1v15DecrypterSessionKey},

	{"TestNonZeroRandomBytes", _xtest.TestNonZeroRandomBytes},

	{"TestSignPKCS1v15", _xtest.TestSignPKCS1v15},

	{"TestVerifyPKCS1v15", _xtest.TestVerifyPKCS1v15},

	{"TestOverlongMessagePKCS1v15", _xtest.TestOverlongMessagePKCS1v15},

	{"TestUnpaddedSignature", _xtest.TestUnpaddedSignature},

	{"TestShortSessionKey", _xtest.TestShortSessionKey},

	{"TestShortPKCS1v15Signature", _xtest.TestShortPKCS1v15Signature},

	{"TestPSSGolden", _xtest.TestPSSGolden},

	{"TestPSSOpenSSL", _xtest.TestPSSOpenSSL},

	{"TestPSSNilOpts", _xtest.TestPSSNilOpts},

	{"TestPSSSigning", _xtest.TestPSSSigning},

	{"TestPSS513", _xtest.TestPSS513},

	{"TestInvalidPSSSaltLength", _xtest.TestInvalidPSSSaltLength},

	{"TestHashOverride", _xtest.TestHashOverride},

	{"TestKeyGeneration", _xtest.TestKeyGeneration},

	{"Test3PrimeKeyGeneration", _xtest.Test3PrimeKeyGeneration},

	{"Test4PrimeKeyGeneration", _xtest.Test4PrimeKeyGeneration},

	{"TestNPrimeKeyGeneration", _xtest.TestNPrimeKeyGeneration},

	{"TestImpossibleKeyGeneration", _xtest.TestImpossibleKeyGeneration},

	{"TestTinyKeyGeneration", _xtest.TestTinyKeyGeneration},

	{"TestGnuTLSKey", _xtest.TestGnuTLSKey},

	{"TestAllocations", _xtest.TestAllocations},

	{"TestEverything", _xtest.TestEverything},

	{"TestKeyTooSmall", _xtest.TestKeyTooSmall},

	{"TestEncryptOAEP", _xtest.TestEncryptOAEP},

	{"TestDecryptOAEP", _xtest.TestDecryptOAEP},

	{"Test2DecryptOAEP", _xtest.Test2DecryptOAEP},

	{"TestEncryptDecryptOAEP", _xtest.TestEncryptDecryptOAEP},

	{"TestPSmallerThanQ", _xtest.TestPSmallerThanQ},

	{"TestLargeSizeDifference", _xtest.TestLargeSizeDifference},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkDecryptPKCS1v15", _xtest.BenchmarkDecryptPKCS1v15},

	{"BenchmarkEncryptPKCS1v15", _xtest.BenchmarkEncryptPKCS1v15},

	{"BenchmarkDecryptOAEP", _xtest.BenchmarkDecryptOAEP},

	{"BenchmarkEncryptOAEP", _xtest.BenchmarkEncryptOAEP},

	{"BenchmarkSignPKCS1v15", _xtest.BenchmarkSignPKCS1v15},

	{"BenchmarkVerifyPKCS1v15", _xtest.BenchmarkVerifyPKCS1v15},

	{"BenchmarkSignPSS", _xtest.BenchmarkSignPSS},

	{"BenchmarkVerifyPSS", _xtest.BenchmarkVerifyPSS},

	{"BenchmarkParsePKCS8PrivateKey", _xtest.BenchmarkParsePKCS8PrivateKey},

	{"BenchmarkGenerateKey", _xtest.BenchmarkGenerateKey},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "crypto/rsa"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

