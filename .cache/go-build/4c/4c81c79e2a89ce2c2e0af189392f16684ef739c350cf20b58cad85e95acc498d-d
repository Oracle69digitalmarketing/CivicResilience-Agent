
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "maps"


	_xtest "maps_test"

)

var tests = []testing.InternalTest{

	{"TestAll", _test.TestAll},

	{"TestKeys", _test.TestKeys},

	{"TestValues", _test.TestValues},

	{"TestInsert", _test.TestInsert},

	{"TestCollect", _test.TestCollect},

	{"TestEqual", _test.TestEqual},

	{"TestEqualFunc", _test.TestEqualFunc},

	{"TestClone", _test.TestClone},

	{"TestCloneNil", _test.TestCloneNil},

	{"TestCopy", _test.TestCopy},

	{"TestDeleteFunc", _test.TestDeleteFunc},

	{"TestCloneWithDelete", _test.TestCloneWithDelete},

	{"TestCloneWithMapAssign", _test.TestCloneWithMapAssign},

	{"TestCloneLarge", _test.TestCloneLarge},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkMapClone", _test.BenchmarkMapClone},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleClone", _xtest.ExampleClone, "1\n100\n1\n100\n100\n", false},

	{"ExampleCopy", _xtest.ExampleCopy, "m2 is: map[one:1 two:2]\nm1 is: map[one:1 two:2]\nm2 is: map[one:100 two:2]\nm4 is: map[one:[1 2 3] two:[4 5 6]]\nm3 is: map[one:[100 2 3] two:[4 5 6]]\nm4 is: map[one:[100 2 3] two:[4 5 6]]\n", false},

	{"ExampleDeleteFunc", _xtest.ExampleDeleteFunc, "map[four:4 two:2]\n", false},

	{"ExampleEqual", _xtest.ExampleEqual, "true\nfalse\n", false},

	{"ExampleEqualFunc", _xtest.ExampleEqualFunc, "true\n", false},

	{"ExampleAll", _xtest.ExampleAll, "m2 is: map[one:1 two:2]\n", false},

	{"ExampleKeys", _xtest.ExampleKeys, "[1 10 1000]\n", false},

	{"ExampleValues", _xtest.ExampleValues, "[THOUSAND Ten one]\n", false},

	{"ExampleInsert", _xtest.ExampleInsert, "m1 is: map[0:zero 1:one 2:two 3:three 1000:THOUSAND]\n", false},

	{"ExampleCollect", _xtest.ExampleCollect, "m1 is: map[0:zero 1:one 2:two 3:three]\n", false},

}

func init() {

	testdeps.ImportPath = "maps"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

