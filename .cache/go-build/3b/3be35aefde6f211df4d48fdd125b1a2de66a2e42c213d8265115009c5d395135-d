
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "crypto/x509"


	_xtest "crypto/x509_test"

)

var tests = []testing.InternalTest{

	{"TestCertPoolEqual", _test.TestCertPoolEqual},

	{"TestConstraintCases", _test.TestConstraintCases},

	{"TestRFC2821Parsing", _test.TestRFC2821Parsing},

	{"TestBadNamesInConstraints", _test.TestBadNamesInConstraints},

	{"TestBadNamesInSANs", _test.TestBadNamesInSANs},

	{"TestOID", _test.TestOID},

	{"TestInvalidOID", _test.TestInvalidOID},

	{"TestOIDEqual", _test.TestOIDEqual},

	{"TestOIDMarshal", _test.TestOIDMarshal},

	{"TestOIDEqualASN1OID", _test.TestOIDEqualASN1OID},

	{"TestOIDUnmarshalBinary", _test.TestOIDUnmarshalBinary},

	{"TestParseASN1String", _test.TestParseASN1String},

	{"TestPolicyParse", _test.TestPolicyParse},

	{"TestParsePolicies", _test.TestParsePolicies},

	{"TestParseCertificateNegativeMaxPathLength", _test.TestParseCertificateNegativeMaxPathLength},

	{"TestDecrypt", _test.TestDecrypt},

	{"TestEncrypt", _test.TestEncrypt},

	{"TestIncompleteBlock", _test.TestIncompleteBlock},

	{"TestPKCS8", _test.TestPKCS8},

	{"TestPKCS8MismatchKeyFormat", _test.TestPKCS8MismatchKeyFormat},

	{"TestNISTPKITSPolicy", _test.TestNISTPKITSPolicy},

	{"TestPlatformVerifier", _test.TestPlatformVerifier},

	{"TestFallbackPanic", _test.TestFallbackPanic},

	{"TestFallback", _test.TestFallback},

	{"TestEnvVars", _test.TestEnvVars},

	{"TestLoadSystemCertsLoadColonSeparatedDirs", _test.TestLoadSystemCertsLoadColonSeparatedDirs},

	{"TestReadUniqueDirectoryEntries", _test.TestReadUniqueDirectoryEntries},

	{"TestParseECPrivateKey", _test.TestParseECPrivateKey},

	{"TestECMismatchKeyFormat", _test.TestECMismatchKeyFormat},

	{"TestGoVerify", _test.TestGoVerify},

	{"TestSystemVerify", _test.TestSystemVerify},

	{"TestUnknownAuthorityError", _test.TestUnknownAuthorityError},

	{"TestNameConstraints", _test.TestNameConstraints},

	{"TestValidHostname", _test.TestValidHostname},

	{"TestPathologicalChain", _test.TestPathologicalChain},

	{"TestLongChain", _test.TestLongChain},

	{"TestSystemRootsError", _test.TestSystemRootsError},

	{"TestSystemRootsErrorUnwrap", _test.TestSystemRootsErrorUnwrap},

	{"TestIssue51759", _test.TestIssue51759},

	{"TestPathBuilding", _test.TestPathBuilding},

	{"TestEKUEnforcement", _test.TestEKUEnforcement},

	{"TestVerifyEKURootAsLeaf", _test.TestVerifyEKURootAsLeaf},

	{"TestVerifyNilPubKey", _test.TestVerifyNilPubKey},

	{"TestVerifyBareWildcard", _test.TestVerifyBareWildcard},

	{"TestPoliciesValid", _test.TestPoliciesValid},

	{"TestInvalidPolicyWithAnyKeyUsage", _test.TestInvalidPolicyWithAnyKeyUsage},

	{"TestParsePKCS1PrivateKey", _test.TestParsePKCS1PrivateKey},

	{"TestPKCS1MismatchPublicKeyFormat", _test.TestPKCS1MismatchPublicKeyFormat},

	{"TestMarshalInvalidPublicKey", _test.TestMarshalInvalidPublicKey},

	{"TestParsePKIXPublicKey", _test.TestParsePKIXPublicKey},

	{"TestPKIXMismatchPublicKeyFormat", _test.TestPKIXMismatchPublicKeyFormat},

	{"TestMarshalRSAPrivateKey", _test.TestMarshalRSAPrivateKey},

	{"TestMarshalRSAPrivateKeyInvalid", _test.TestMarshalRSAPrivateKeyInvalid},

	{"TestMarshalRSAPublicKey", _test.TestMarshalRSAPublicKey},

	{"TestMatchHostnames", _test.TestMatchHostnames},

	{"TestMatchIP", _test.TestMatchIP},

	{"TestCertificateParse", _test.TestCertificateParse},

	{"TestCertificateEqualOnNil", _test.TestCertificateEqualOnNil},

	{"TestMismatchedSignatureAlgorithm", _test.TestMismatchedSignatureAlgorithm},

	{"TestCreateSelfSignedCertificate", _test.TestCreateSelfSignedCertificate},

	{"TestECDSA", _test.TestECDSA},

	{"TestParseCertificateWithDsaPublicKey", _test.TestParseCertificateWithDsaPublicKey},

	{"TestParseCertificateWithDSASignatureAlgorithm", _test.TestParseCertificateWithDSASignatureAlgorithm},

	{"TestVerifyCertificateWithDSASignature", _test.TestVerifyCertificateWithDSASignature},

	{"TestRSAPSSSelfSigned", _test.TestRSAPSSSelfSigned},

	{"TestEd25519SelfSigned", _test.TestEd25519SelfSigned},

	{"TestCRLCreation", _test.TestCRLCreation},

	{"TestParseDERCRL", _test.TestParseDERCRL},

	{"TestCRLWithoutExpiry", _test.TestCRLWithoutExpiry},

	{"TestParsePEMCRL", _test.TestParsePEMCRL},

	{"TestImports", _test.TestImports},

	{"TestCreateCertificateRequest", _test.TestCreateCertificateRequest},

	{"TestCertificateRequestOverrides", _test.TestCertificateRequestOverrides},

	{"TestParseCertificateRequest", _test.TestParseCertificateRequest},

	{"TestCriticalFlagInCSRRequestedExtensions", _test.TestCriticalFlagInCSRRequestedExtensions},

	{"TestMaxPathLenNotCA", _test.TestMaxPathLenNotCA},

	{"TestMaxPathLen", _test.TestMaxPathLen},

	{"TestNoAuthorityKeyIdInSelfSignedCert", _test.TestNoAuthorityKeyIdInSelfSignedCert},

	{"TestNoSubjectKeyIdInCert", _test.TestNoSubjectKeyIdInCert},

	{"TestASN1BitLength", _test.TestASN1BitLength},

	{"TestVerifyEmptyCertificate", _test.TestVerifyEmptyCertificate},

	{"TestInsecureAlgorithmErrorString", _test.TestInsecureAlgorithmErrorString},

	{"TestMD5", _test.TestMD5},

	{"TestSHA1", _test.TestSHA1},

	{"TestRSAMissingNULLParameters", _test.TestRSAMissingNULLParameters},

	{"TestISOOIDInCertificate", _test.TestISOOIDInCertificate},

	{"TestMultipleRDN", _test.TestMultipleRDN},

	{"TestSystemCertPool", _test.TestSystemCertPool},

	{"TestEmptyNameConstraints", _test.TestEmptyNameConstraints},

	{"TestPKIXNameString", _test.TestPKIXNameString},

	{"TestRDNSequenceString", _test.TestRDNSequenceString},

	{"TestCriticalNameConstraintWithUnknownType", _test.TestCriticalNameConstraintWithUnknownType},

	{"TestBadIPMask", _test.TestBadIPMask},

	{"TestAdditionFieldsInGeneralSubtree", _test.TestAdditionFieldsInGeneralSubtree},

	{"TestEmptySerialNumber", _test.TestEmptySerialNumber},

	{"TestEmptySubject", _test.TestEmptySubject},

	{"TestMultipleURLsInCRLDP", _test.TestMultipleURLsInCRLDP},

	{"TestPKCS1MismatchKeyFormat", _test.TestPKCS1MismatchKeyFormat},

	{"TestCreateRevocationList", _test.TestCreateRevocationList},

	{"TestRSAPSAParameters", _test.TestRSAPSAParameters},

	{"TestUnknownExtKey", _test.TestUnknownExtKey},

	{"TestIA5SANEnforcement", _test.TestIA5SANEnforcement},

	{"TestCreateCertificateBrokenSigner", _test.TestCreateCertificateBrokenSigner},

	{"TestCreateCertificateLegacy", _test.TestCreateCertificateLegacy},

	{"TestCertificateRequestRoundtripFields", _test.TestCertificateRequestRoundtripFields},

	{"TestParseCertificateRawEquals", _test.TestParseCertificateRawEquals},

	{"TestSigAlgMismatch", _test.TestSigAlgMismatch},

	{"TestAuthKeyIdOptional", _test.TestAuthKeyIdOptional},

	{"TestLargeOID", _test.TestLargeOID},

	{"TestParseUniqueID", _test.TestParseUniqueID},

	{"TestDisableSHA1ForCertOnly", _test.TestDisableSHA1ForCertOnly},

	{"TestParseRevocationList", _test.TestParseRevocationList},

	{"TestRevocationListCheckSignatureFrom", _test.TestRevocationListCheckSignatureFrom},

	{"TestOmitEmptyExtensions", _test.TestOmitEmptyExtensions},

	{"TestParseNegativeSerial", _test.TestParseNegativeSerial},

	{"TestCreateNegativeSerial", _test.TestCreateNegativeSerial},

	{"TestDuplicateExtensionsCert", _test.TestDuplicateExtensionsCert},

	{"TestDuplicateExtensionsCSR", _test.TestDuplicateExtensionsCSR},

	{"TestDuplicateAttributesCSR", _test.TestDuplicateAttributesCSR},

	{"TestCertificateOIDPoliciesGODEBUG", _test.TestCertificateOIDPoliciesGODEBUG},

	{"TestCertificatePolicies", _test.TestCertificatePolicies},

	{"TestGob", _test.TestGob},

	{"TestRejectCriticalAKI", _test.TestRejectCriticalAKI},

	{"TestRejectCriticalAIA", _test.TestRejectCriticalAIA},

	{"TestRejectCriticalSKI", _test.TestRejectCriticalSKI},

	{"TestMessageSigner", _test.TestMessageSigner},

	{"TestCreateCertificateNegativeMaxPathLength", _test.TestCreateCertificateNegativeMaxPathLength},

	{"TestHybridPool", _xtest.TestHybridPool},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkOIDMarshalUnmarshalText", _test.BenchmarkOIDMarshalUnmarshalText},

	{"BenchmarkCreateCertificate", _test.BenchmarkCreateCertificate},

	{"BenchmarkParseCertificate", _test.BenchmarkParseCertificate},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "crypto/x509"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

